
PF_PCSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d8  080031d8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031e0  080031e0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080031e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000001c0  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6f8  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d57  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0002c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000798  00000000  00000000  0002ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000393d  00000000  00000000  0002d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9ee  00000000  00000000  00030dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d71  00000000  00000000  0003e7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012752c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f9c  00000000  00000000  0012757c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003028 	.word	0x08003028

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08003028 	.word	0x08003028

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <uartInit>:
/*
* @brief  Inicializa la UART. Envía parametros de inicialización por UART
* @param  None
* @retval true:UART se inicializó correctamente, false:falla al inicializar UART
*/
bool_t uartInit(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

	UartHandle.Instance        = USARTx;
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <uartInit+0x54>)
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <uartInit+0x58>)
 80004f8:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate   		= BAUDRATE;
 80004fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <uartInit+0x54>)
 8000500:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength 		= WORD_LENGTH;
 8000502:	2200      	movs	r2, #0
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <uartInit+0x54>)
 8000506:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   		= STOP_BITS;
 8000508:	2200      	movs	r2, #0
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <uartInit+0x54>)
 800050c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     		= PARITY;
 800050e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <uartInit+0x54>)
 8000514:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  		= HW_FLOW_CTL;
 8000516:	2200      	movs	r2, #0
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <uartInit+0x54>)
 800051a:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       		= UART_MODE_TX_RX;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <uartInit+0x54>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling 	= 16;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <uartInit+0x54>)
 8000524:	2210      	movs	r2, #16
 8000526:	61da      	str	r2, [r3, #28]

	/*Inicializar UART --------------------------------------------*/
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <uartInit+0x54>)
 800052a:	f002 f8cf 	bl	80026cc <HAL_UART_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <uartInit+0x48>
	  return 0;
 8000534:	2300      	movs	r3, #0
 8000536:	e002      	b.n	800053e <uartInit+0x4e>
	}
	send_init_data();
 8000538:	f000 f808 	bl	800054c <send_init_data>
	return 1;
 800053c:	2301      	movs	r3, #1
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000034 	.word	0x20000034
 8000548:	40004800 	.word	0x40004800

0800054c <send_init_data>:
/*
* @brief  Envia parámetros de configuración por UART
* @param  None
* @retval None
*/
void send_init_data(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	uartSendString("\r\n>> UART inicializado correctamente\r\n");
 8000550:	483a      	ldr	r0, [pc, #232]	; (800063c <send_init_data+0xf0>)
 8000552:	f000 f89b 	bl	800068c <uartSendString>
	uartSendString(">> Parametros de configuracion UART:\r\n");
 8000556:	483a      	ldr	r0, [pc, #232]	; (8000640 <send_init_data+0xf4>)
 8000558:	f000 f898 	bl	800068c <uartSendString>
	uartSendString("    > BAUDRATE:  ");
 800055c:	4839      	ldr	r0, [pc, #228]	; (8000644 <send_init_data+0xf8>)
 800055e:	f000 f895 	bl	800068c <uartSendString>
	uartSendString(uint_to_string(BAUDRATE));
 8000562:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f8e0 	bl	800072c <uint_to_string>
 800056c:	4603      	mov	r3, r0
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f88c 	bl	800068c <uartSendString>
	uartSendString("\r\n    > WORD_LENGTH:  ");
 8000574:	4834      	ldr	r0, [pc, #208]	; (8000648 <send_init_data+0xfc>)
 8000576:	f000 f889 	bl	800068c <uartSendString>
	if(WORD_LENGTH==UART_WORDLENGTH_8B){
 800057a:	2300      	movs	r3, #0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d103      	bne.n	8000588 <send_init_data+0x3c>
		uartSendString("8bits\r\n");
 8000580:	4832      	ldr	r0, [pc, #200]	; (800064c <send_init_data+0x100>)
 8000582:	f000 f883 	bl	800068c <uartSendString>
 8000586:	e002      	b.n	800058e <send_init_data+0x42>
	}else{
		uartSendString("9bits\r\n");
 8000588:	4831      	ldr	r0, [pc, #196]	; (8000650 <send_init_data+0x104>)
 800058a:	f000 f87f 	bl	800068c <uartSendString>
	}
	uartSendString("    > STOP_BITS:  ");
 800058e:	4831      	ldr	r0, [pc, #196]	; (8000654 <send_init_data+0x108>)
 8000590:	f000 f87c 	bl	800068c <uartSendString>
	if(STOP_BITS==UART_STOPBITS_1){
 8000594:	2300      	movs	r3, #0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <send_init_data+0x56>
		uartSendString("1\r\n");
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <send_init_data+0x10c>)
 800059c:	f000 f876 	bl	800068c <uartSendString>
 80005a0:	e002      	b.n	80005a8 <send_init_data+0x5c>
	}else{
		uartSendString("2\r\n");
 80005a2:	482e      	ldr	r0, [pc, #184]	; (800065c <send_init_data+0x110>)
 80005a4:	f000 f872 	bl	800068c <uartSendString>
	}
	uartSendString("    > PARITY:  ");
 80005a8:	482d      	ldr	r0, [pc, #180]	; (8000660 <send_init_data+0x114>)
 80005aa:	f000 f86f 	bl	800068c <uartSendString>
	if(PARITY==UART_PARITY_ODD){
 80005ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80005b6:	d103      	bne.n	80005c0 <send_init_data+0x74>
		uartSendString("ODD\r\n");
 80005b8:	482a      	ldr	r0, [pc, #168]	; (8000664 <send_init_data+0x118>)
 80005ba:	f000 f867 	bl	800068c <uartSendString>
 80005be:	e00b      	b.n	80005d8 <send_init_data+0x8c>
	}else if(PARITY==UART_PARITY_EVEN){
 80005c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005c8:	d103      	bne.n	80005d2 <send_init_data+0x86>
		uartSendString("EVEN\r\n");
 80005ca:	4827      	ldr	r0, [pc, #156]	; (8000668 <send_init_data+0x11c>)
 80005cc:	f000 f85e 	bl	800068c <uartSendString>
 80005d0:	e002      	b.n	80005d8 <send_init_data+0x8c>
	}else {
		uartSendString("NONE\r\n");
 80005d2:	4826      	ldr	r0, [pc, #152]	; (800066c <send_init_data+0x120>)
 80005d4:	f000 f85a 	bl	800068c <uartSendString>
	}
	uartSendString("    > HW_FLOW_CTL:  ");
 80005d8:	4825      	ldr	r0, [pc, #148]	; (8000670 <send_init_data+0x124>)
 80005da:	f000 f857 	bl	800068c <uartSendString>
	switch(HW_FLOW_CTL){
 80005de:	2300      	movs	r3, #0
 80005e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005e4:	d01a      	beq.n	800061c <send_init_data+0xd0>
 80005e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005ea:	d81b      	bhi.n	8000624 <send_init_data+0xd8>
 80005ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f0:	d010      	beq.n	8000614 <send_init_data+0xc8>
 80005f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f6:	d815      	bhi.n	8000624 <send_init_data+0xd8>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <send_init_data+0xb8>
 80005fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000600:	d004      	beq.n	800060c <send_init_data+0xc0>
 8000602:	e00f      	b.n	8000624 <send_init_data+0xd8>
		case UART_HWCONTROL_NONE:
			uartSendString("NONE\r\n");
 8000604:	4819      	ldr	r0, [pc, #100]	; (800066c <send_init_data+0x120>)
 8000606:	f000 f841 	bl	800068c <uartSendString>
		break;
 800060a:	e00f      	b.n	800062c <send_init_data+0xe0>
		case UART_HWCONTROL_RTS:
			uartSendString("RTS\r\n");
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <send_init_data+0x128>)
 800060e:	f000 f83d 	bl	800068c <uartSendString>
		break;
 8000612:	e00b      	b.n	800062c <send_init_data+0xe0>
		case UART_HWCONTROL_CTS:
			uartSendString("CTS\r\n");
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <send_init_data+0x12c>)
 8000616:	f000 f839 	bl	800068c <uartSendString>
		break;
 800061a:	e007      	b.n	800062c <send_init_data+0xe0>
		case UART_HWCONTROL_RTS_CTS:
			uartSendString("RTS-CTS\r\n");
 800061c:	4817      	ldr	r0, [pc, #92]	; (800067c <send_init_data+0x130>)
 800061e:	f000 f835 	bl	800068c <uartSendString>
		break;
 8000622:	e003      	b.n	800062c <send_init_data+0xe0>
		default:
			uartSendString("Error en reconocer HW_Control");
 8000624:	4816      	ldr	r0, [pc, #88]	; (8000680 <send_init_data+0x134>)
 8000626:	f000 f831 	bl	800068c <uartSendString>
		break;
 800062a:	bf00      	nop
	}
	uartSendString("    > UART_MODE:  UART_MODE_TX_RX\r\n");
 800062c:	4815      	ldr	r0, [pc, #84]	; (8000684 <send_init_data+0x138>)
 800062e:	f000 f82d 	bl	800068c <uartSendString>
	uartSendString("    > OVER_SAMPLING:  16\r\n");
 8000632:	4815      	ldr	r0, [pc, #84]	; (8000688 <send_init_data+0x13c>)
 8000634:	f000 f82a 	bl	800068c <uartSendString>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08003040 	.word	0x08003040
 8000640:	08003068 	.word	0x08003068
 8000644:	08003090 	.word	0x08003090
 8000648:	080030a4 	.word	0x080030a4
 800064c:	080030bc 	.word	0x080030bc
 8000650:	080030c4 	.word	0x080030c4
 8000654:	080030cc 	.word	0x080030cc
 8000658:	080030e0 	.word	0x080030e0
 800065c:	080030e4 	.word	0x080030e4
 8000660:	080030e8 	.word	0x080030e8
 8000664:	080030f8 	.word	0x080030f8
 8000668:	08003100 	.word	0x08003100
 800066c:	08003108 	.word	0x08003108
 8000670:	08003110 	.word	0x08003110
 8000674:	08003128 	.word	0x08003128
 8000678:	08003130 	.word	0x08003130
 800067c:	08003138 	.word	0x08003138
 8000680:	08003144 	.word	0x08003144
 8000684:	08003164 	.word	0x08003164
 8000688:	08003188 	.word	0x08003188

0800068c <uartSendString>:
/*
* @brief  Envía un String por UART. Longitud máxima del array definida por UART_LONG_MAX (incluyendo el '\0')
* @param  Puntero a cadena de caracteres a enviar
* @retval None
*/
void uartSendString(uint8_t * pstring){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	if(pstring!=0){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d029      	beq.n	80006ee <uartSendString+0x62>
		uint16_t size=0;
 800069a:	2300      	movs	r3, #0
 800069c:	81fb      	strh	r3, [r7, #14]
		bool_t is_string=0;
 800069e:	2300      	movs	r3, #0
 80006a0:	737b      	strb	r3, [r7, #13]
		for(int i=0;i<UART_LONG_MAX;i++){
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	e00e      	b.n	80006c6 <uartSendString+0x3a>
			if(pstring[i]=='\0'){
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d105      	bne.n	80006c0 <uartSendString+0x34>
				is_string=1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	737b      	strb	r3, [r7, #13]
				size=i;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	81fb      	strh	r3, [r7, #14]
				i=UART_LONG_MAX;
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	60bb      	str	r3, [r7, #8]
		for(int i=0;i<UART_LONG_MAX;i++){
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2b63      	cmp	r3, #99	; 0x63
 80006ca:	dded      	ble.n	80006a8 <uartSendString+0x1c>
			}
		}
		if(is_string==0){	//Convertir en String y recortar
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	f083 0301 	eor.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <uartSendString+0x58>
			pstring[UART_LONG_MAX-1]='\0';
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3363      	adds	r3, #99	; 0x63
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
			size=UART_LONG_MAX-1;
 80006e0:	2363      	movs	r3, #99	; 0x63
 80006e2:	81fb      	strh	r3, [r7, #14]
		}

		uartSendStringSize(pstring, size);
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	4619      	mov	r1, r3
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f805 	bl	80006f8 <uartSendStringSize>
	} else {
		/* Control de Error*/
	}
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <uartSendStringSize>:
* @brief  Envía String por UART. Longitud máxima del array definida por UART_LONG_MAX (incluyendo el '\0')
* @param  puntero al string a enviar
* @param  cantidad de caracteres a enviar
* @retval None
*/
void uartSendStringSize(uint8_t * pstring, uint16_t size){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	if(pstring!=0 && size>0){
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d009      	beq.n	800071e <uartSendStringSize+0x26>
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d006      	beq.n	800071e <uartSendStringSize+0x26>
		HAL_UART_Transmit(&UartHandle, pstring, size, 0xffff);
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <uartSendStringSize+0x30>)
 800071a:	f002 f824 	bl	8002766 <HAL_UART_Transmit>
	} else {
		/*Control de Errror*/
	}
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000034 	.word	0x20000034

0800072c <uint_to_string>:
/*
* @brief  Función para convertir uint a string
* @param  Número a convertir
* @retval Número en forma de String (con '\0' al final)
*/
static uint8_t *uint_to_string(uint32_t numero){
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	uint32_t divisor;
	uint8_t Exp_divisor;
	uint32_t digito;
	uint8_t i = 0;	/*Posición en el string*/
 8000734:	2300      	movs	r3, #0
 8000736:	74fb      	strb	r3, [r7, #19]
	bool_t  start_num = 0;	/*Var aux para eliminar 0's a izquierda del dígito significativo*/
 8000738:	2300      	movs	r3, #0
 800073a:	74bb      	strb	r3, [r7, #18]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 800073c:	2300      	movs	r3, #0
 800073e:	747b      	strb	r3, [r7, #17]
 8000740:	e039      	b.n	80007b6 <uint_to_string+0x8a>
		Exp_divisor = 9 - posicion;
 8000742:	7c7b      	ldrb	r3, [r7, #17]
 8000744:	f1c3 0309 	rsb	r3, r3, #9
 8000748:	73fb      	strb	r3, [r7, #15]

		/*divisor=10^Exp_divisor*/
		divisor = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 800074e:	2300      	movs	r3, #0
 8000750:	743b      	strb	r3, [r7, #16]
 8000752:	e008      	b.n	8000766 <uint_to_string+0x3a>
			divisor = divisor * 10;
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 8000760:	7c3b      	ldrb	r3, [r7, #16]
 8000762:	3301      	adds	r3, #1
 8000764:	743b      	strb	r3, [r7, #16]
 8000766:	7c3a      	ldrb	r2, [r7, #16]
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3f2      	bcc.n	8000754 <uint_to_string+0x28>
		}

		digito = (numero/divisor)%10;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fbb2 f2f3 	udiv	r2, r2, r3
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <uint_to_string+0xa8>)
 8000778:	fba3 1302 	umull	r1, r3, r3, r2
 800077c:	08d9      	lsrs	r1, r3, #3
 800077e:	460b      	mov	r3, r1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	440b      	add	r3, r1
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	60bb      	str	r3, [r7, #8]
		if(digito!=0||start_num!=0){
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <uint_to_string+0x6a>
 8000790:	7cbb      	ldrb	r3, [r7, #18]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00c      	beq.n	80007b0 <uint_to_string+0x84>
			string_uint[i++] = digito + '0';
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	7cfb      	ldrb	r3, [r7, #19]
 800079c:	1c59      	adds	r1, r3, #1
 800079e:	74f9      	strb	r1, [r7, #19]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <uint_to_string+0xac>)
 80007aa:	545a      	strb	r2, [r3, r1]
			start_num = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	74bb      	strb	r3, [r7, #18]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 80007b0:	7c7b      	ldrb	r3, [r7, #17]
 80007b2:	3301      	adds	r3, #1
 80007b4:	747b      	strb	r3, [r7, #17]
 80007b6:	7c7b      	ldrb	r3, [r7, #17]
 80007b8:	2b09      	cmp	r3, #9
 80007ba:	d9c2      	bls.n	8000742 <uint_to_string+0x16>
		}
	}
	string_uint[i] = '\0';
 80007bc:	7cfb      	ldrb	r3, [r7, #19]
 80007be:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <uint_to_string+0xac>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	54d1      	strb	r1, [r2, r3]
	return string_uint;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <uint_to_string+0xac>)
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	cccccccd 	.word	0xcccccccd
 80007d8:	20000078 	.word	0x20000078

080007dc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d10e      	bne.n	800080a <BSP_LED_Init+0x2e>
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <BSP_LED_Init+0x94>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <BSP_LED_Init+0x94>)
 80007f6:	f043 0302 	orr.w	r3, r3, #2
 80007fa:	6313      	str	r3, [r2, #48]	; 0x30
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <BSP_LED_Init+0x94>)
 80007fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	e00d      	b.n	8000826 <BSP_LED_Init+0x4a>
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <BSP_LED_Init+0x94>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <BSP_LED_Init+0x94>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <BSP_LED_Init+0x94>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <BSP_LED_Init+0x98>)
 800082a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <BSP_LED_Init+0x9c>)
 8000840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000844:	f107 0214 	add.w	r2, r7, #20
 8000848:	4611      	mov	r1, r2
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f804 	bl	8001858 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4a09      	ldr	r2, [pc, #36]	; (8000878 <BSP_LED_Init+0x9c>)
 8000854:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <BSP_LED_Init+0x98>)
 800085c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	f001 f9a4 	bl	8001bb0 <HAL_GPIO_WritePin>
}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	080031b8 	.word	0x080031b8
 8000878:	20000000 	.word	0x20000000

0800087c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <BSP_LED_On+0x2c>)
 800088a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <BSP_LED_On+0x30>)
 8000892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000896:	2201      	movs	r2, #1
 8000898:	4619      	mov	r1, r3
 800089a:	f001 f989 	bl	8001bb0 <HAL_GPIO_WritePin>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000000 	.word	0x20000000
 80008ac:	080031b8 	.word	0x080031b8

080008b0 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <BSP_LED_Toggle+0x2c>)
 80008be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	4906      	ldr	r1, [pc, #24]	; (80008e0 <BSP_LED_Toggle+0x30>)
 80008c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008ca:	4619      	mov	r1, r3
 80008cc:	4610      	mov	r0, r2
 80008ce:	f001 f988 	bl	8001be2 <HAL_GPIO_TogglePin>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000
 80008e0:	080031b8 	.word	0x080031b8

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <SystemInit+0x60>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a15      	ldr	r2, [pc, #84]	; (8000944 <SystemInit+0x60>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <SystemInit+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a12      	ldr	r2, [pc, #72]	; (8000948 <SystemInit+0x64>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <SystemInit+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <SystemInit+0x64>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <SystemInit+0x64>)
 8000910:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <SystemInit+0x64>)
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <SystemInit+0x68>)
 800091e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <SystemInit+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a08      	ldr	r2, [pc, #32]	; (8000948 <SystemInit+0x64>)
 8000926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800092a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SystemInit+0x60>)
 8000934:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000938:	609a      	str	r2, [r3, #8]
#endif
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00
 8000948:	40023800 	.word	0x40023800
 800094c:	24003010 	.word	0x24003010

08000950 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000962:	e7fe      	b.n	8000962 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000968:	e7fe      	b.n	8000968 <MemManage_Handler+0x4>

0800096a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800096e:	e7fe      	b.n	800096e <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000974:	e7fe      	b.n	8000974 <UsageFault_Handler+0x4>

08000976 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80009a4:	f000 fe2e 	bl	8001604 <HAL_IncTick>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <DHT22_init>:
/*
 * @brief	Inicializa el DHT22 con los valores de la estructura cargada
 * @param	Puntero a estructura del DHT22
 * @return	None
 */
void DHT22_init(DHT22_sensor * DHT22_struct){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	if(is_pin(DHT22_struct)){	/*Si el PIN es válido*/
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 fb6e 	bl	8001096 <is_pin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d036      	beq.n	8000a2e <DHT22_init+0x82>
		DHT22_struct->data.temp = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	661a      	str	r2, [r3, #96]	; 0x60
		DHT22_struct->data.temp_string[0] = '\0';
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		DHT22_struct->data.hum  = 0;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	66da      	str	r2, [r3, #108]	; 0x6c
		DHT22_struct->data.hum_string[0]  = '\0';
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		DHT22_struct->time_last_call = 0;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	679a      	str	r2, [r3, #120]	; 0x78
		for(uint8_t i=0;i<(sizeof(_DHT22.T_Array)/sizeof(_DHT22.T_Array[0]));i++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e008      	b.n	80009fe <DHT22_init+0x52>
			DHT22_struct->T_Array[i]=0;
 80009ec:	7bfa      	ldrb	r2, [r7, #15]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3204      	adds	r2, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(uint8_t i=0;i<(sizeof(_DHT22.T_Array)/sizeof(_DHT22.T_Array[0]));i++){
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	3301      	adds	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	2b2a      	cmp	r3, #42	; 0x2a
 8000a02:	d9f3      	bls.n	80009ec <DHT22_init+0x40>
		}
		GPIO_set_config(DHT22_struct->Port, DHT22_struct->Pin);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4610      	mov	r0, r2
 8000a12:	f000 fa0f 	bl	8000e34 <GPIO_set_config>

		GPIO_write(DHT22_struct->Port, DHT22_struct->Pin, 1);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6858      	ldr	r0, [r3, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	4619      	mov	r1, r3
 8000a24:	f000 fb14 	bl	8001050 <GPIO_write>
		tomar_lectura(DHT22_struct);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f85b 	bl	8000ae4 <tomar_lectura>
	}
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <DHT22_get_temp>:
/*
 * @brief	Solicita el valor de temperatura
 * @param	Puntero a estructura del DHT22
 * @return	Temperatura en grados celcius
 */
float DHT22_get_temp(DHT22_sensor * DHT22_struct){
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	float temp=0;
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
	if(tiempo_actual() - DHT22_struct->time_last_call > 2000){
 8000a44:	f000 fbd6 	bl	80011f4 <tiempo_actual>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a54:	d902      	bls.n	8000a5c <DHT22_get_temp+0x26>
		tomar_lectura(DHT22_struct);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f844 	bl	8000ae4 <tomar_lectura>
	}
	temp = DHT22_struct->data.temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a60:	60fb      	str	r3, [r7, #12]
	return temp;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	ee07 3a90 	vmov	s15, r3
}
 8000a68:	eeb0 0a67 	vmov.f32	s0, s15
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <DHT22_get_temp_string>:
/*
 * @brief	Solicita el valor de temperatura
 * @param	Puntero a estructura del DHT22
 * @return	Temperatura en grados celcius en String
 */
uint8_t * DHT22_get_temp_string(DHT22_sensor * DHT22_struct){
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	DHT22_get_temp(DHT22_struct);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffdb 	bl	8000a36 <DHT22_get_temp>
	return DHT22_struct->data.temp_string;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3364      	adds	r3, #100	; 0x64
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <DHT22_get_hum>:
/*
 * @brief	Solicita el valor de humedad
 * @param	Puntero a estructura del DHT22
 * @return	Humedad
 */
float DHT22_get_hum(DHT22_sensor * DHT22_struct){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	float hum=0;
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
	if(tiempo_actual() - DHT22_struct->time_last_call > 2000){
 8000a9a:	f000 fbab 	bl	80011f4 <tiempo_actual>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000aaa:	d902      	bls.n	8000ab2 <DHT22_get_hum+0x26>
		tomar_lectura(DHT22_struct);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f819 	bl	8000ae4 <tomar_lectura>
	}
	hum = DHT22_struct->data.hum;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ab6:	60fb      	str	r3, [r7, #12]
	return hum;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	ee07 3a90 	vmov	s15, r3
}
 8000abe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <DHT22_get_hum_string>:
/*
 * @brief	Solicita el valor de humedad
 * @param	Puntero a estructura del DHT22
 * @return	Humedad en String
 */
uint8_t * DHT22_get_hum_string(DHT22_sensor * DHT22_struct){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	DHT22_get_hum(DHT22_struct);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffdb 	bl	8000a8c <DHT22_get_hum>
	return DHT22_struct->data.hum_string;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3370      	adds	r3, #112	; 0x70
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <tomar_lectura>:
/*
 * @brief	Solicita valores al DHT22 y guarda los tiempos en el array T_Array[85]
 * @param	Puntero a estructura del DHT22
 * @return	None
 */
static void tomar_lectura(DHT22_sensor * DHT22_struct){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(is_pin(DHT22_struct)){
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 fad2 	bl	8001096 <is_pin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d038      	beq.n	8000b6a <tomar_lectura+0x86>
		reset_timer();
 8000af8:	f000 fb8e 	bl	8001218 <reset_timer>
		GPIO_write(DHT22_struct->Port, DHT22_struct->Pin, 0);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6858      	ldr	r0, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f000 faa1 	bl	8001050 <GPIO_write>
		delay_ms(2);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f000 fb77 	bl	8001202 <delay_ms>
		reset_timer();
 8000b14:	f000 fb80 	bl	8001218 <reset_timer>
		reset_T_Array_counter();
 8000b18:	f000 fad8 	bl	80010cc <reset_T_Array_counter>
		GPIO_write(DHT22_struct->Port, DHT22_struct->Pin, 1);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6858      	ldr	r0, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2201      	movs	r2, #1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f000 fa91 	bl	8001050 <GPIO_write>
		delay_ms(5);	/*Delay 5ms para que se realice la transmisión*/
 8000b2e:	2005      	movs	r0, #5
 8000b30:	f000 fb67 	bl	8001202 <delay_ms>
		for(uint8_t i=0;i<(sizeof(_DHT22.T_Array)/sizeof(_DHT22.T_Array[0]));i++){
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e00c      	b.n	8000b54 <tomar_lectura+0x70>
			DHT22_struct->T_Array[i] = _DHT22.T_Array[i];
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <tomar_lectura+0x90>)
 8000b40:	3304      	adds	r3, #4
 8000b42:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3204      	adds	r2, #4
 8000b4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(uint8_t i=0;i<(sizeof(_DHT22.T_Array)/sizeof(_DHT22.T_Array[0]));i++){
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	3301      	adds	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b2a      	cmp	r3, #42	; 0x2a
 8000b58:	d9ef      	bls.n	8000b3a <tomar_lectura+0x56>
		}
		decodificar(DHT22_struct);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f80c 	bl	8000b78 <decodificar>
		DHT22_struct->time_last_call = tiempo_actual();
 8000b60:	f000 fb48 	bl	80011f4 <tiempo_actual>
 8000b64:	4602      	mov	r2, r0
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	679a      	str	r2, [r3, #120]	; 0x78
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000d8 	.word	0x200000d8

08000b78 <decodificar>:
/*
 * @brief	Traduce los tiempos guardados en el array T_Array[85] y guarda los datos en la sub-estructura data
 * @param	Puntero a estructura del DHT22
 * @return	None
 */
static void decodificar(DHT22_sensor * DHT22_struct){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint32_t cadena_dato=0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]

	for(uint8_t i=inicio_bit_0; i<=pos_last_bit_data; i++){
 8000b84:	2302      	movs	r3, #2
 8000b86:	76fb      	strb	r3, [r7, #27]
 8000b88:	e013      	b.n	8000bb2 <decodificar+0x3a>
		if(DHT22_struct->T_Array[i]>100){
 8000b8a:	7efa      	ldrb	r2, [r7, #27]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3204      	adds	r2, #4
 8000b90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b94:	2b64      	cmp	r3, #100	; 0x64
 8000b96:	d909      	bls.n	8000bac <decodificar+0x34>
			cadena_dato += 1UL<<(pos_last_bit_data-i);
 8000b98:	2321      	movs	r3, #33	; 0x21
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	7efb      	ldrb	r3, [r7, #27]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	69fa      	ldr	r2, [r7, #28]
 8000ba8:	4413      	add	r3, r2
 8000baa:	61fb      	str	r3, [r7, #28]
	for(uint8_t i=inicio_bit_0; i<=pos_last_bit_data; i++){
 8000bac:	7efb      	ldrb	r3, [r7, #27]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	76fb      	strb	r3, [r7, #27]
 8000bb2:	2221      	movs	r2, #33	; 0x21
 8000bb4:	7efb      	ldrb	r3, [r7, #27]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d9e7      	bls.n	8000b8a <decodificar+0x12>
		}
	}

	float humidity = (float)(cadena_dato/(1<<16));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	0c1b      	lsrs	r3, r3, #16
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc6:	edc7 7a05 	vstr	s15, [r7, #20]
	humidity = humidity/10;
 8000bca:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd6:	edc7 7a05 	vstr	s15, [r7, #20]
	float temperature = (float)(cadena_dato%(1<<15));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000be0:	ee07 3a90 	vmov	s15, r3
 8000be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000be8:	edc7 7a04 	vstr	s15, [r7, #16]
	temperature = temperature/10;
 8000bec:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bf0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf8:	edc7 7a04 	vstr	s15, [r7, #16]
	DHT22_struct->data.hum = humidity;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	66da      	str	r2, [r3, #108]	; 0x6c
	DHT22_struct->data.temp = temperature;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	661a      	str	r2, [r3, #96]	; 0x60

	/*variables tipo string*/
	uint8_t * data_string = uint_to_string((uint32_t)(humidity*10));
 8000c08:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c18:	ee17 0a90 	vmov	r0, s15
 8000c1c:	f000 f888 	bl	8000d30 <uint_to_string>
 8000c20:	60f8      	str	r0, [r7, #12]
	if(humidity<10){
 8000c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	d516      	bpl.n	8000c62 <decodificar+0xea>
		DHT22_struct->data.hum_string[0]=data_string[0];
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		DHT22_struct->data.hum_string[1]=',';
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	222c      	movs	r2, #44	; 0x2c
 8000c42:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		DHT22_struct->data.hum_string[2]=data_string[1];
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	785a      	ldrb	r2, [r3, #1]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		DHT22_struct->data.hum_string[3]='%';
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2225      	movs	r2, #37	; 0x25
 8000c54:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		DHT22_struct->data.hum_string[4]='\0';
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8000c60:	e01a      	b.n	8000c98 <decodificar+0x120>
	} else {
		DHT22_struct->data.hum_string[0]=data_string[0];
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	781a      	ldrb	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		DHT22_struct->data.hum_string[1]=data_string[1];
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	785a      	ldrb	r2, [r3, #1]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		DHT22_struct->data.hum_string[2]=',';
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	222c      	movs	r2, #44	; 0x2c
 8000c7a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		DHT22_struct->data.hum_string[3]=data_string[2];
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	789a      	ldrb	r2, [r3, #2]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		DHT22_struct->data.hum_string[4]='%';
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2225      	movs	r2, #37	; 0x25
 8000c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		DHT22_struct->data.hum_string[5]='\0';
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	}

	data_string = uint_to_string((uint32_t)(temperature*10));
 8000c98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca8:	ee17 0a90 	vmov	r0, s15
 8000cac:	f000 f840 	bl	8000d30 <uint_to_string>
 8000cb0:	60f8      	str	r0, [r7, #12]
	if(temperature<10){
 8000cb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cb6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc2:	d516      	bpl.n	8000cf2 <decodificar+0x17a>
		DHT22_struct->data.temp_string[0]=data_string[0];
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		DHT22_struct->data.temp_string[1]=',';
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	222c      	movs	r2, #44	; 0x2c
 8000cd2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		DHT22_struct->data.temp_string[2]=data_string[1];
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	785a      	ldrb	r2, [r3, #1]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		DHT22_struct->data.temp_string[3]='C';	/*No toma el '°'*/
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2243      	movs	r2, #67	; 0x43
 8000ce4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		DHT22_struct->data.temp_string[4]='\0';
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		DHT22_struct->data.temp_string[2]=',';
		DHT22_struct->data.temp_string[3]=data_string[2];
		DHT22_struct->data.temp_string[4]='C';	/*No toma el '°'*/
		DHT22_struct->data.temp_string[5]='\0';
	}
}
 8000cf0:	e01a      	b.n	8000d28 <decodificar+0x1b0>
		DHT22_struct->data.temp_string[0]=data_string[0];
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		DHT22_struct->data.temp_string[1]=data_string[1];
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	785a      	ldrb	r2, [r3, #1]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		DHT22_struct->data.temp_string[2]=',';
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	222c      	movs	r2, #44	; 0x2c
 8000d0a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		DHT22_struct->data.temp_string[3]=data_string[2];
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	789a      	ldrb	r2, [r3, #2]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		DHT22_struct->data.temp_string[4]='C';	/*No toma el '°'*/
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2243      	movs	r2, #67	; 0x43
 8000d1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		DHT22_struct->data.temp_string[5]='\0';
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <uint_to_string>:
/*
 * @brief	Convierte entero a string
 * @param	Número a convertir
 * @return	Número en formato string
 */
uint8_t * uint_to_string(uint32_t numero){
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	uint32_t divisor;
	uint8_t Exp_divisor;
	uint32_t digito;
	uint8_t i = 0;	/*Posición en el string*/
 8000d38:	2300      	movs	r3, #0
 8000d3a:	74fb      	strb	r3, [r7, #19]
	bool_t  start_num = 0;	/*Var aux para eliminar 0's a izquierda del dígito significativo*/
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	74bb      	strb	r3, [r7, #18]
	string_uint[0]='\0';
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <uint_to_string+0xc0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	747b      	strb	r3, [r7, #17]
 8000d4a:	e039      	b.n	8000dc0 <uint_to_string+0x90>
		Exp_divisor = 9 - posicion;
 8000d4c:	7c7b      	ldrb	r3, [r7, #17]
 8000d4e:	f1c3 0309 	rsb	r3, r3, #9
 8000d52:	73fb      	strb	r3, [r7, #15]

		/*divisor=10^Exp_divisor*/
		divisor = 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	743b      	strb	r3, [r7, #16]
 8000d5c:	e008      	b.n	8000d70 <uint_to_string+0x40>
			divisor = divisor * 10;
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 8000d6a:	7c3b      	ldrb	r3, [r7, #16]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	743b      	strb	r3, [r7, #16]
 8000d70:	7c3a      	ldrb	r2, [r7, #16]
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3f2      	bcc.n	8000d5e <uint_to_string+0x2e>
		}

		digito = (numero/divisor)%10;
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <uint_to_string+0xc4>)
 8000d82:	fba3 1302 	umull	r1, r3, r3, r2
 8000d86:	08d9      	lsrs	r1, r3, #3
 8000d88:	460b      	mov	r3, r1
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	60bb      	str	r3, [r7, #8]
		if(digito!=0||start_num!=0){
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <uint_to_string+0x70>
 8000d9a:	7cbb      	ldrb	r3, [r7, #18]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00c      	beq.n	8000dba <uint_to_string+0x8a>
			string_uint[i++] = digito + '0';
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	7cfb      	ldrb	r3, [r7, #19]
 8000da6:	1c59      	adds	r1, r3, #1
 8000da8:	74f9      	strb	r1, [r7, #19]
 8000daa:	4619      	mov	r1, r3
 8000dac:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <uint_to_string+0xc0>)
 8000db4:	545a      	strb	r2, [r3, r1]
			start_num = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	74bb      	strb	r3, [r7, #18]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 8000dba:	7c7b      	ldrb	r3, [r7, #17]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	747b      	strb	r3, [r7, #17]
 8000dc0:	7c7b      	ldrb	r3, [r7, #17]
 8000dc2:	2b09      	cmp	r3, #9
 8000dc4:	d9c2      	bls.n	8000d4c <uint_to_string+0x1c>
		}
	}
	if(string_uint[0]=='\0'){
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <uint_to_string+0xc0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d104      	bne.n	8000dd8 <uint_to_string+0xa8>
		string_uint[0]='0';
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <uint_to_string+0xc0>)
 8000dd0:	2230      	movs	r2, #48	; 0x30
 8000dd2:	701a      	strb	r2, [r3, #0]
		i=1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	74fb      	strb	r3, [r7, #19]
	}
	string_uint[i] = '\0';
 8000dd8:	7cfb      	ldrb	r3, [r7, #19]
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <uint_to_string+0xc0>)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	54d1      	strb	r1, [r2, r3]
	return string_uint;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <uint_to_string+0xc0>)
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	371c      	adds	r7, #28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000084 	.word	0x20000084
 8000df4:	cccccccd 	.word	0xcccccccd

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <GPIO_set_config>:
 * @brief	Configurar GPIO para comunicación con DHT22
 * @param	Puntero a estructura delay
 * @return	None
 * @note	GPIO modo salida (permite leer PIN), open-drain con interrupciones por flanco ascendente y descendente
 */
void GPIO_set_config(GPIO_TypeDef * GPIO_port, uint16_t GPIO_num){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b090      	sub	sp, #64	; 0x40
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
	if(is_pin(GPIO_num)){
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f927 	bl	8001096 <is_pin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80e8 	beq.w	8001020 <GPIO_set_config+0x1ec>
		//Preparar configuración PIN
		GPIO_InitTypeDef PIN_DHT22_config;

		if(GPIOA == GPIO_port){__HAL_RCC_GPIOA_CLK_ENABLE();}
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a75      	ldr	r2, [pc, #468]	; (8001028 <GPIO_set_config+0x1f4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d10d      	bne.n	8000e74 <GPIO_set_config+0x40>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5c:	4b73      	ldr	r3, [pc, #460]	; (800102c <GPIO_set_config+0x1f8>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a72      	ldr	r2, [pc, #456]	; (800102c <GPIO_set_config+0x1f8>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b70      	ldr	r3, [pc, #448]	; (800102c <GPIO_set_config+0x1f8>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		if(GPIOB == GPIO_port){__HAL_RCC_GPIOB_CLK_ENABLE();}
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a6e      	ldr	r2, [pc, #440]	; (8001030 <GPIO_set_config+0x1fc>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d10d      	bne.n	8000e98 <GPIO_set_config+0x64>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
 8000e80:	4b6a      	ldr	r3, [pc, #424]	; (800102c <GPIO_set_config+0x1f8>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a69      	ldr	r2, [pc, #420]	; (800102c <GPIO_set_config+0x1f8>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b67      	ldr	r3, [pc, #412]	; (800102c <GPIO_set_config+0x1f8>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	6a3b      	ldr	r3, [r7, #32]
		if(GPIOC == GPIO_port){__HAL_RCC_GPIOC_CLK_ENABLE();}
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a66      	ldr	r2, [pc, #408]	; (8001034 <GPIO_set_config+0x200>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d10d      	bne.n	8000ebc <GPIO_set_config+0x88>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	4b61      	ldr	r3, [pc, #388]	; (800102c <GPIO_set_config+0x1f8>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a60      	ldr	r2, [pc, #384]	; (800102c <GPIO_set_config+0x1f8>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b5e      	ldr	r3, [pc, #376]	; (800102c <GPIO_set_config+0x1f8>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	69fb      	ldr	r3, [r7, #28]
		if(GPIOD == GPIO_port){__HAL_RCC_GPIOD_CLK_ENABLE();}
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a5e      	ldr	r2, [pc, #376]	; (8001038 <GPIO_set_config+0x204>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d10d      	bne.n	8000ee0 <GPIO_set_config+0xac>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
 8000ec8:	4b58      	ldr	r3, [pc, #352]	; (800102c <GPIO_set_config+0x1f8>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a57      	ldr	r2, [pc, #348]	; (800102c <GPIO_set_config+0x1f8>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b55      	ldr	r3, [pc, #340]	; (800102c <GPIO_set_config+0x1f8>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]
		if(GPIOE == GPIO_port){__HAL_RCC_GPIOE_CLK_ENABLE();}
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a56      	ldr	r2, [pc, #344]	; (800103c <GPIO_set_config+0x208>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d10d      	bne.n	8000f04 <GPIO_set_config+0xd0>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	4b4f      	ldr	r3, [pc, #316]	; (800102c <GPIO_set_config+0x1f8>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <GPIO_set_config+0x1f8>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <GPIO_set_config+0x1f8>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
		if(GPIOF == GPIO_port){__HAL_RCC_GPIOF_CLK_ENABLE();}
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <GPIO_set_config+0x20c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d10d      	bne.n	8000f28 <GPIO_set_config+0xf4>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	4b46      	ldr	r3, [pc, #280]	; (800102c <GPIO_set_config+0x1f8>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a45      	ldr	r2, [pc, #276]	; (800102c <GPIO_set_config+0x1f8>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b43      	ldr	r3, [pc, #268]	; (800102c <GPIO_set_config+0x1f8>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0320 	and.w	r3, r3, #32
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
		if(GPIOG == GPIO_port){__HAL_RCC_GPIOG_CLK_ENABLE();}
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a46      	ldr	r2, [pc, #280]	; (8001044 <GPIO_set_config+0x210>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d10d      	bne.n	8000f4c <GPIO_set_config+0x118>
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4b3d      	ldr	r3, [pc, #244]	; (800102c <GPIO_set_config+0x1f8>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a3c      	ldr	r2, [pc, #240]	; (800102c <GPIO_set_config+0x1f8>)
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b3a      	ldr	r3, [pc, #232]	; (800102c <GPIO_set_config+0x1f8>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]


		PIN_DHT22_config.Pin = GPIO_num;
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
		PIN_DHT22_config.Mode = MODE_OUTPUT | OUTPUT_OD | EXTI_IT | TRIGGER_FALLING;
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <GPIO_set_config+0x214>)
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
		PIN_DHT22_config.Pull = GPIO_PULLUP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
		PIN_DHT22_config.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
		//Cargar configuración PIN
		HAL_GPIO_Init(GPIO_port, &PIN_DHT22_config);	//Modificar por GPIO_port y GPIO_num
 8000f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fc78 	bl	8001858 <HAL_GPIO_Init>

		IRQn_Type IRQn;
		switch (GPIO_num){
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d837      	bhi.n	8000fe0 <GPIO_set_config+0x1ac>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <GPIO_set_config+0x144>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000fb9 	.word	0x08000fb9
 8000f7c:	08000fc1 	.word	0x08000fc1
 8000f80:	08000fe1 	.word	0x08000fe1
 8000f84:	08000fc9 	.word	0x08000fc9
 8000f88:	08000fe1 	.word	0x08000fe1
 8000f8c:	08000fe1 	.word	0x08000fe1
 8000f90:	08000fe1 	.word	0x08000fe1
 8000f94:	08000fd1 	.word	0x08000fd1
 8000f98:	08000fe1 	.word	0x08000fe1
 8000f9c:	08000fe1 	.word	0x08000fe1
 8000fa0:	08000fe1 	.word	0x08000fe1
 8000fa4:	08000fe1 	.word	0x08000fe1
 8000fa8:	08000fe1 	.word	0x08000fe1
 8000fac:	08000fe1 	.word	0x08000fe1
 8000fb0:	08000fe1 	.word	0x08000fe1
 8000fb4:	08000fd9 	.word	0x08000fd9
			case GPIO_PIN_0:
				IRQn = EXTI0_IRQn;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000fbe:	e01b      	b.n	8000ff8 <GPIO_set_config+0x1c4>
			case GPIO_PIN_1:
				IRQn = EXTI1_IRQn;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000fc6:	e017      	b.n	8000ff8 <GPIO_set_config+0x1c4>
			case GPIO_PIN_2:
				IRQn = EXTI2_IRQn;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000fce:	e013      	b.n	8000ff8 <GPIO_set_config+0x1c4>
			case GPIO_PIN_3:
				IRQn = EXTI3_IRQn;
 8000fd0:	2309      	movs	r3, #9
 8000fd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000fd6:	e00f      	b.n	8000ff8 <GPIO_set_config+0x1c4>
			case GPIO_PIN_4:
				IRQn = EXTI4_IRQn;
 8000fd8:	230a      	movs	r3, #10
 8000fda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000fde:	e00b      	b.n	8000ff8 <GPIO_set_config+0x1c4>
			default:
				if(GPIO_num<GPIO_PIN_10){
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe6:	d203      	bcs.n	8000ff0 <GPIO_set_config+0x1bc>
					IRQn = EXTI9_5_IRQn;
 8000fe8:	2317      	movs	r3, #23
 8000fea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				} else {
					IRQn = EXTI15_10_IRQn;
				}
			break;
 8000fee:	e002      	b.n	8000ff6 <GPIO_set_config+0x1c2>
					IRQn = EXTI15_10_IRQn;
 8000ff0:	2328      	movs	r3, #40	; 0x28
 8000ff2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000ff6:	bf00      	nop
		}
		HAL_NVIC_SetPriority(IRQn,0,0);//EXTI15_10_IRQn//EXTI2_IRQn
 8000ff8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fc00 	bl	8001806 <HAL_NVIC_SetPriority>
		NVIC_EnableIRQ(IRQn);
 8001006:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fef4 	bl	8000df8 <__NVIC_EnableIRQ>

		/*Inicializar Timer*/
		Timer_Init();
 8001010:	f000 f914 	bl	800123c <Timer_Init>

		_DHT22.Port = GPIO_port;
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <GPIO_set_config+0x218>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6053      	str	r3, [r2, #4]
		_DHT22.Pin = GPIO_num;
 800101a:	4a0c      	ldr	r2, [pc, #48]	; (800104c <GPIO_set_config+0x218>)
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	8013      	strh	r3, [r2, #0]
	}
}
 8001020:	bf00      	nop
 8001022:	3740      	adds	r7, #64	; 0x40
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40020000 	.word	0x40020000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40021400 	.word	0x40021400
 8001044:	40021800 	.word	0x40021800
 8001048:	00210011 	.word	0x00210011
 800104c:	200000d8 	.word	0x200000d8

08001050 <GPIO_write>:
 * @param	Número de PIN
 * @param	Estado (bajo u open)
 * @return	None
 * @note	GPIO en modo open-drain
 */
void GPIO_write(GPIO_TypeDef * GPIO_port, uint16_t GPIO_num, bool_t GPIO_state){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
	if(is_pin(GPIO_num)){
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f817 	bl	8001096 <is_pin>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00f      	beq.n	800108e <GPIO_write+0x3e>
		if(GPIO_state) {
 800106e:	787b      	ldrb	r3, [r7, #1]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <GPIO_write+0x32>
			HAL_GPIO_WritePin(GPIO_port, GPIO_num, GPIO_PIN_SET);
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	2201      	movs	r2, #1
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 fd98 	bl	8001bb0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_port, GPIO_num, GPIO_PIN_RESET);
		}
	} else {
		/*Error en el número de PIN*/
	}
}
 8001080:	e005      	b.n	800108e <GPIO_write+0x3e>
			HAL_GPIO_WritePin(GPIO_port, GPIO_num, GPIO_PIN_RESET);
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 fd91 	bl	8001bb0 <HAL_GPIO_WritePin>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <is_pin>:
/*
 * @brief	Verifica si el valor del pin es válido
 * @param	Número de PIN
 * @return	1 si es válido, sino devuelve 0
 */
bool_t is_pin(uint16_t GPIO_num){
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	80fb      	strh	r3, [r7, #6]
	if(IS_GPIO_PIN(GPIO_num) != 1){
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <is_pin+0x1e>
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <is_pin+0x1e>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <is_pin+0x20>
 80010b4:	2300      	movs	r3, #0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <is_pin+0x28>
		return 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <is_pin+0x2a>
	}
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <reset_T_Array_counter>:
/*
 * @brief	Recetea la variable T_Array_counter
 * @param	None
 * @return	None
 */
void reset_T_Array_counter(void){
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	T_Array_counter=0;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <reset_T_Array_counter+0x14>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000154 	.word	0x20000154

080010e4 <EXTI0_IRQHandler>:
/*
 * @brief	Manejador de interrupción EXIT0
 * @param	None
 * @return	None
 */
void EXTI0_IRQHandler(void){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80010e8:	2001      	movs	r0, #1
 80010ea:	f000 fd95 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <EXTI1_IRQHandler>:
/*
 * @brief	Manejador de interrupción EXIT1
 * @param	None
 * @return	None
 */
void EXTI1_IRQHandler(void){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80010f6:	2002      	movs	r0, #2
 80010f8:	f000 fd8e 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <EXTI2_IRQHandler>:
/*
 * @brief	Manejador de interrupción EXIT2
 * @param	None
 * @return	None
 */
void EXTI2_IRQHandler(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001104:	2004      	movs	r0, #4
 8001106:	f000 fd87 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}

0800110e <EXTI3_IRQHandler>:
/*
 * @brief	Manejador de interrupción EXIT3
 * @param	None
 * @return	None
 */
void EXTI3_IRQHandler(void){
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001112:	2008      	movs	r0, #8
 8001114:	f000 fd80 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <EXTI4_IRQHandler>:
/*
 * @brief	Manejador de interrupción EXIT4
 * @param	None
 * @return	None
 */
void EXTI4_IRQHandler(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001120:	2010      	movs	r0, #16
 8001122:	f000 fd79 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <EXTI9_5_IRQHandler>:
/*
 * @brief	Manejador de interrupción EXIT9_5
 * @param	None
 * @return	None
 */
void EXTI9_5_IRQHandler(void){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	if(_DHT22.Pin<=GPIO_PIN_9 && _DHT22.Pin>=GPIO_PIN_5){
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <EXTI9_5_IRQHandler+0x30>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001138:	d809      	bhi.n	800114e <EXTI9_5_IRQHandler+0x22>
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <EXTI9_5_IRQHandler+0x30>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	2b1f      	cmp	r3, #31
 8001140:	d905      	bls.n	800114e <EXTI9_5_IRQHandler+0x22>
		HAL_GPIO_EXTI_IRQHandler(_DHT22.Pin);
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <EXTI9_5_IRQHandler+0x30>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fd66 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
 800114c:	e003      	b.n	8001156 <EXTI9_5_IRQHandler+0x2a>
	} else {
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800114e:	2020      	movs	r0, #32
 8001150:	f000 fd62 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
	}
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000d8 	.word	0x200000d8

08001160 <EXTI15_10_IRQHandler>:
/*
 * @brief	Manejador de interrupción EXIT15_10
 * @param	None
 * @return	None
 */
void EXTI15_10_IRQHandler (void){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if(_DHT22.Pin<=GPIO_PIN_15 && _DHT22.Pin>=GPIO_PIN_10){
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <EXTI15_10_IRQHandler+0x34>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800116c:	d80a      	bhi.n	8001184 <EXTI15_10_IRQHandler+0x24>
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <EXTI15_10_IRQHandler+0x34>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001176:	d305      	bcc.n	8001184 <EXTI15_10_IRQHandler+0x24>
		HAL_GPIO_EXTI_IRQHandler(_DHT22.Pin);
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <EXTI15_10_IRQHandler+0x34>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fd4b 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
 8001182:	e004      	b.n	800118e <EXTI15_10_IRQHandler+0x2e>
	} else {
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001184:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001188:	f000 fd46 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
	}
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000d8 	.word	0x200000d8

08001198 <HAL_GPIO_EXTI_Callback>:
/*
 * @brief	Control de interrupción por PIN
 * @param	Número de PIN
 * @return	None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
	  /*if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin)){
		  //flanco_ascendente();
	  } else{
		  //flanco_descendente();
	  }*/
	_DHT22.T_Array[T_Array_counter] = __HAL_TIM_GET_COUNTER(&hTim2);
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_GPIO_EXTI_Callback+0x54>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b291      	uxth	r1, r2
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x58>)
 80011b0:	3304      	adds	r3, #4
 80011b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	__HAL_TIM_SET_COUNTER(&hTim2,0);
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x50>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
	T_Array_counter++;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_GPIO_EXTI_Callback+0x54>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_GPIO_EXTI_Callback+0x54>)
 80011c8:	701a      	strb	r2, [r3, #0]
	if(T_Array_counter> (sizeof(_DHT22.T_Array)/sizeof(_DHT22.T_Array[0]))-1 ){
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <HAL_GPIO_EXTI_Callback+0x54>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b2a      	cmp	r3, #42	; 0x2a
 80011d0:	d902      	bls.n	80011d8 <HAL_GPIO_EXTI_Callback+0x40>
		T_Array_counter=0;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_GPIO_EXTI_Callback+0x54>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	}
	//uartSendString("a");
	BSP_LED_Toggle(LED2);
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff fb69 	bl	80008b0 <BSP_LED_Toggle>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000090 	.word	0x20000090
 80011ec:	20000154 	.word	0x20000154
 80011f0:	200000d8 	.word	0x200000d8

080011f4 <tiempo_actual>:
/*
 * @brief	Devuelve el tiempo actual desde que está corriendo el programa
 * @param	None
 * @return	Tiempo desde que el uC está encendido en milisegundos
 */
uint32_t tiempo_actual(void){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80011f8:	f000 fa18 	bl	800162c <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}

08001202 <delay_ms>:
/*
 * @brief	CGenerar delay bloqueante en milisegundos
 * @param	Tiempo en milisegundos a esperar
 * @return	None
 */
void delay_ms(uint32_t delay){
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fa1a 	bl	8001644 <HAL_Delay>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <reset_timer>:
/*
 * @brief	Resetea el tiempo del timer 2
 * @param	None
 * @return	None
 */
void reset_timer(void){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	T_Array_counter=0;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <reset_timer+0x1c>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&hTim2,0);
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <reset_timer+0x20>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20000154 	.word	0x20000154
 8001238:	20000090 	.word	0x20000090

0800123c <Timer_Init>:

/*Funciones copiadas del archivo de "stm32f4xx_hal_tim.c", pero compilador no las reconoce*/

void Timer_Init(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <Timer_Init+0x64>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <Timer_Init+0x64>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <Timer_Init+0x64>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
    hTim2.Instance = TIM2;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <Timer_Init+0x68>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001264:	601a      	str	r2, [r3, #0]
    hTim2.Init.Prescaler = 80-1;//Para que cuente en us
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <Timer_Init+0x68>)
 8001268:	224f      	movs	r2, #79	; 0x4f
 800126a:	605a      	str	r2, [r3, #4]
    hTim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <Timer_Init+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
    hTim2.Init.Period = 0xffff;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <Timer_Init+0x68>)
 8001274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001278:	60da      	str	r2, [r3, #12]
    hTim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <Timer_Init+0x68>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
    hTim2.Init.RepetitionCounter = 0;
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <Timer_Init+0x68>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
    hTim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <Timer_Init+0x68>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&hTim2);
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <Timer_Init+0x68>)
 800128e:	f000 f80b 	bl	80012a8 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&hTim2); // Trying to start the base counter
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <Timer_Init+0x68>)
 8001294:	f000 f858 	bl	8001348 <HAL_TIM_Base_Start>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800
 80012a4:	20000090 	.word	0x20000090

080012a8 <HAL_TIM_Base_Init>:

HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e041      	b.n	800133e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d106      	bne.n	80012d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8a2 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3304      	adds	r3, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4610      	mov	r0, r2
 80012e8:	f000 f8a0 	bl	800142c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_TIM_Base_Start>:

HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d001      	beq.n	8001360 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e046      	b.n	80013ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <HAL_TIM_Base_Start+0xb4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d022      	beq.n	80013b8 <HAL_TIM_Base_Start+0x70>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137a:	d01d      	beq.n	80013b8 <HAL_TIM_Base_Start+0x70>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_TIM_Base_Start+0xb8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d018      	beq.n	80013b8 <HAL_TIM_Base_Start+0x70>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1e      	ldr	r2, [pc, #120]	; (8001404 <HAL_TIM_Base_Start+0xbc>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d013      	beq.n	80013b8 <HAL_TIM_Base_Start+0x70>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_TIM_Base_Start+0xc0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00e      	beq.n	80013b8 <HAL_TIM_Base_Start+0x70>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_TIM_Base_Start+0xc4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d009      	beq.n	80013b8 <HAL_TIM_Base_Start+0x70>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <HAL_TIM_Base_Start+0xc8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d004      	beq.n	80013b8 <HAL_TIM_Base_Start+0x70>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <HAL_TIM_Base_Start+0xcc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d111      	bne.n	80013dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d010      	beq.n	80013ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0201 	orr.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013da:	e007      	b.n	80013ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40010000 	.word	0x40010000
 8001400:	40000400 	.word	0x40000400
 8001404:	40000800 	.word	0x40000800
 8001408:	40000c00 	.word	0x40000c00
 800140c:	40010400 	.word	0x40010400
 8001410:	40014000 	.word	0x40014000
 8001414:	40001800 	.word	0x40001800

08001418 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <TIM_Base_SetConfig>:

void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a40      	ldr	r2, [pc, #256]	; (8001540 <TIM_Base_SetConfig+0x114>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <TIM_Base_SetConfig+0x40>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144a:	d00f      	beq.n	800146c <TIM_Base_SetConfig+0x40>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <TIM_Base_SetConfig+0x118>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00b      	beq.n	800146c <TIM_Base_SetConfig+0x40>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3c      	ldr	r2, [pc, #240]	; (8001548 <TIM_Base_SetConfig+0x11c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <TIM_Base_SetConfig+0x40>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3b      	ldr	r2, [pc, #236]	; (800154c <TIM_Base_SetConfig+0x120>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d003      	beq.n	800146c <TIM_Base_SetConfig+0x40>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3a      	ldr	r2, [pc, #232]	; (8001550 <TIM_Base_SetConfig+0x124>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d108      	bne.n	800147e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <TIM_Base_SetConfig+0x114>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d02b      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148c:	d027      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <TIM_Base_SetConfig+0x118>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d023      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <TIM_Base_SetConfig+0x11c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01f      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a2a      	ldr	r2, [pc, #168]	; (800154c <TIM_Base_SetConfig+0x120>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01b      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <TIM_Base_SetConfig+0x124>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d017      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <TIM_Base_SetConfig+0x128>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <TIM_Base_SetConfig+0x12c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00f      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a26      	ldr	r2, [pc, #152]	; (800155c <TIM_Base_SetConfig+0x130>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00b      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a25      	ldr	r2, [pc, #148]	; (8001560 <TIM_Base_SetConfig+0x134>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a24      	ldr	r2, [pc, #144]	; (8001564 <TIM_Base_SetConfig+0x138>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d003      	beq.n	80014de <TIM_Base_SetConfig+0xb2>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a23      	ldr	r2, [pc, #140]	; (8001568 <TIM_Base_SetConfig+0x13c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d108      	bne.n	80014f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <TIM_Base_SetConfig+0x114>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d003      	beq.n	8001524 <TIM_Base_SetConfig+0xf8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <TIM_Base_SetConfig+0x124>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d103      	bne.n	800152c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	615a      	str	r2, [r3, #20]
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40010000 	.word	0x40010000
 8001544:	40000400 	.word	0x40000400
 8001548:	40000800 	.word	0x40000800
 800154c:	40000c00 	.word	0x40000c00
 8001550:	40010400 	.word	0x40010400
 8001554:	40014000 	.word	0x40014000
 8001558:	40014400 	.word	0x40014400
 800155c:	40014800 	.word	0x40014800
 8001560:	40001800 	.word	0x40001800
 8001564:	40001c00 	.word	0x40001c00
 8001568:	40002000 	.word	0x40002000

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x34>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x34>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x34>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x34>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f931 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	200f      	movs	r0, #15
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f000 fbaa 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f93b 	bl	800183e <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f000 f911 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000014 	.word	0x20000014
 8001600:	20000010 	.word	0x20000010

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000014 	.word	0x20000014
 8001628:	20000158 	.word	0x20000158

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000158 	.word	0x20000158

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000014 	.word	0x20000014

0800168c <__NVIC_SetPriorityGrouping>:
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff47 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff5c 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffb0 	bl	80017ac <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e177      	b.n	8001b64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8166 	bne.w	8001b5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80c0 	beq.w	8001b5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_GPIO_Init+0x324>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a65      	ldr	r2, [pc, #404]	; (8001b7c <HAL_GPIO_Init+0x324>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_GPIO_Init+0x324>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fa:	4a61      	ldr	r2, [pc, #388]	; (8001b80 <HAL_GPIO_Init+0x328>)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a58      	ldr	r2, [pc, #352]	; (8001b84 <HAL_GPIO_Init+0x32c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d037      	beq.n	8001a96 <HAL_GPIO_Init+0x23e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_GPIO_Init+0x330>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d031      	beq.n	8001a92 <HAL_GPIO_Init+0x23a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a56      	ldr	r2, [pc, #344]	; (8001b8c <HAL_GPIO_Init+0x334>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02b      	beq.n	8001a8e <HAL_GPIO_Init+0x236>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <HAL_GPIO_Init+0x338>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x232>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_GPIO_Init+0x33c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x22e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_GPIO_Init+0x340>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x22a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_GPIO_Init+0x344>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x226>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_GPIO_Init+0x348>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x222>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_GPIO_Init+0x34c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x21e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4f      	ldr	r2, [pc, #316]	; (8001ba8 <HAL_GPIO_Init+0x350>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x21a>
 8001a6e:	2309      	movs	r3, #9
 8001a70:	e012      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a72:	230a      	movs	r3, #10
 8001a74:	e010      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a76:	2308      	movs	r3, #8
 8001a78:	e00e      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e00c      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a7e:	2306      	movs	r3, #6
 8001a80:	e00a      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a82:	2305      	movs	r3, #5
 8001a84:	e008      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a86:	2304      	movs	r3, #4
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e004      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e002      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_GPIO_Init+0x240>
 8001a96:	2300      	movs	r3, #0
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	f002 0203 	and.w	r2, r2, #3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa8:	4935      	ldr	r1, [pc, #212]	; (8001b80 <HAL_GPIO_Init+0x328>)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2e:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <HAL_GPIO_Init+0x354>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	f67f ae84 	bls.w	8001874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40020400 	.word	0x40020400
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40021400 	.word	0x40021400
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	40021c00 	.word	0x40021c00
 8001ba4:	40022000 	.word	0x40022000
 8001ba8:	40022400 	.word	0x40022400
 8001bac:	40013c00 	.word	0x40013c00

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bcc:	e003      	b.n	8001bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	041a      	lsls	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	619a      	str	r2, [r3, #24]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf4:	887a      	ldrh	r2, [r7, #2]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	400b      	ands	r3, r1
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff faae 	bl	8001198 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <HAL_UART_MspInit+0xa0>)
 8001cc2:	f7ff fdc9 	bl	8001858 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <HAL_UART_MspInit+0xa0>)
 8001cd8:	f7ff fdbe 	bl	8001858 <HAL_GPIO_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020c00 	.word	0x40020c00

08001cec <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_PWREx_EnableOverDrive+0x94>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff fc80 	bl	800162c <HAL_GetTick>
 8001d2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d2e:	e009      	b.n	8001d44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d30:	f7ff fc7c 	bl	800162c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d3e:	d901      	bls.n	8001d44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e01f      	b.n	8001d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d1ee      	bne.n	8001d30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d58:	f7ff fc68 	bl	800162c <HAL_GetTick>
 8001d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d5e:	e009      	b.n	8001d74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d60:	f7ff fc64 	bl	800162c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d6e:	d901      	bls.n	8001d74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e007      	b.n	8001d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d80:	d1ee      	bne.n	8001d60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	420e0040 	.word	0x420e0040
 8001d94:	40007000 	.word	0x40007000
 8001d98:	420e0044 	.word	0x420e0044

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e267      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d075      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dba:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d00c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc6:	4b85      	ldr	r3, [pc, #532]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d112      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd2:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b7e      	ldr	r3, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d05b      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d157      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e242      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x74>
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b70      	ldr	r3, [pc, #448]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a6f      	ldr	r2, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xb0>
 8001e34:	4b69      	ldr	r3, [pc, #420]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a68      	ldr	r2, [pc, #416]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fbea 	bl	800162c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fbe6 	bl	800162c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e207      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xc0>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fbd6 	bl	800162c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fbd2 	bl	800162c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1f3      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0xe8>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eca:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c7      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4937      	ldr	r1, [pc, #220]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff fb8b 	bl	800162c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fb87 	bl	800162c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a8      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4925      	ldr	r1, [pc, #148]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_RCC_OscConfig+0x244>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff fb6a 	bl	800162c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fb66 	bl	800162c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e187      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d016      	beq.n	8001fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f94:	f7ff fb4a 	bl	800162c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fb46 	bl	800162c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e167      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x240>)
 8001fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x200>
 8001fba:	e01b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_OscConfig+0x248>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb33 	bl	800162c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00e      	b.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff fb2f 	bl	800162c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d907      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e150      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	42470000 	.word	0x42470000
 8001fe4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	4b88      	ldr	r3, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ea      	bne.n	8001fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8097 	beq.w	8002130 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002006:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b7d      	ldr	r3, [pc, #500]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a7c      	ldr	r2, [pc, #496]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b7a      	ldr	r3, [pc, #488]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b77      	ldr	r3, [pc, #476]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b74      	ldr	r3, [pc, #464]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a73      	ldr	r2, [pc, #460]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff faef 	bl	800162c <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7ff faeb 	bl	800162c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e10c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_RCC_OscConfig+0x474>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x2ea>
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	4a63      	ldr	r2, [pc, #396]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	; 0x70
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x30c>
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6713      	str	r3, [r2, #112]	; 0x70
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	; 0x70
 80020a6:	e00b      	b.n	80020c0 <HAL_RCC_OscConfig+0x324>
 80020a8:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d015      	beq.n	80020f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fab0 	bl	800162c <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff faac 	bl	800162c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e0cb      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e6:	4b49      	ldr	r3, [pc, #292]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ee      	beq.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff fa9a 	bl	800162c <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7ff fa96 	bl	800162c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0b5      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ee      	bne.n	80020fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d105      	bne.n	8002130 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002124:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4a38      	ldr	r2, [pc, #224]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800212a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80a1 	beq.w	800227c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_RCC_OscConfig+0x470>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d05c      	beq.n	8002200 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d141      	bne.n	80021d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCC_OscConfig+0x478>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fa6a 	bl	800162c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fa66 	bl	800162c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e087      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b27      	ldr	r3, [pc, #156]	; (800220c <HAL_RCC_OscConfig+0x470>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	019b      	lsls	r3, r3, #6
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	085b      	lsrs	r3, r3, #1
 8002192:	3b01      	subs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	491b      	ldr	r1, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_OscConfig+0x478>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff fa3f 	bl	800162c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff fa3b 	bl	800162c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e05c      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x416>
 80021d0:	e054      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fa28 	bl	800162c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fa24 	bl	800162c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e045      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
 80021fe:	e03d      	b.n	800227c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e038      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_RCC_OscConfig+0x4ec>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d028      	beq.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d121      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d11a      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	3b01      	subs	r3, #1
 8002262:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0cc      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d90c      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b65      	ldr	r3, [pc, #404]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b8      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d020      	beq.n	8002316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e0:	4b59      	ldr	r3, [pc, #356]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a58      	ldr	r2, [pc, #352]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f8:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a52      	ldr	r2, [pc, #328]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002304:	4b50      	ldr	r3, [pc, #320]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	494d      	ldr	r1, [pc, #308]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d044      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d119      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e07f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e067      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b37      	ldr	r3, [pc, #220]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4934      	ldr	r1, [pc, #208]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7ff f956 	bl	800162c <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7ff f952 	bl	800162c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e04f      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d20c      	bcs.n	80023d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e032      	b.n	800243a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4916      	ldr	r1, [pc, #88]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	490e      	ldr	r1, [pc, #56]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002412:	f000 f821 	bl	8002458 <HAL_RCC_GetSysClockFreq>
 8002416:	4602      	mov	r2, r0
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	490a      	ldr	r1, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	5ccb      	ldrb	r3, [r1, r3]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f8b6 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00
 8002448:	40023800 	.word	0x40023800
 800244c:	080031c0 	.word	0x080031c0
 8002450:	2000000c 	.word	0x2000000c
 8002454:	20000010 	.word	0x20000010

08002458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b094      	sub	sp, #80	; 0x50
 800245e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	; 0x44
 8002464:	2300      	movs	r3, #0
 8002466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002468:	2300      	movs	r3, #0
 800246a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002470:	4b79      	ldr	r3, [pc, #484]	; (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 030c 	and.w	r3, r3, #12
 8002478:	2b08      	cmp	r3, #8
 800247a:	d00d      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x40>
 800247c:	2b08      	cmp	r3, #8
 800247e:	f200 80e1 	bhi.w	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x34>
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x3a>
 800248a:	e0db      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800248c:	4b73      	ldr	r3, [pc, #460]	; (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002490:	e0db      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_RCC_GetSysClockFreq+0x208>)
 8002494:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002496:	e0d8      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002498:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a2:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d063      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	2200      	movs	r2, #0
 80024b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80024b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
 80024c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024ca:	4622      	mov	r2, r4
 80024cc:	462b      	mov	r3, r5
 80024ce:	f04f 0000 	mov.w	r0, #0
 80024d2:	f04f 0100 	mov.w	r1, #0
 80024d6:	0159      	lsls	r1, r3, #5
 80024d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024dc:	0150      	lsls	r0, r2, #5
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4621      	mov	r1, r4
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	6139      	str	r1, [r7, #16]
 80024e8:	4629      	mov	r1, r5
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024fc:	4659      	mov	r1, fp
 80024fe:	018b      	lsls	r3, r1, #6
 8002500:	4651      	mov	r1, sl
 8002502:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002506:	4651      	mov	r1, sl
 8002508:	018a      	lsls	r2, r1, #6
 800250a:	4651      	mov	r1, sl
 800250c:	ebb2 0801 	subs.w	r8, r2, r1
 8002510:	4659      	mov	r1, fp
 8002512:	eb63 0901 	sbc.w	r9, r3, r1
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252a:	4690      	mov	r8, r2
 800252c:	4699      	mov	r9, r3
 800252e:	4623      	mov	r3, r4
 8002530:	eb18 0303 	adds.w	r3, r8, r3
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	462b      	mov	r3, r5
 8002538:	eb49 0303 	adc.w	r3, r9, r3
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800254a:	4629      	mov	r1, r5
 800254c:	024b      	lsls	r3, r1, #9
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002554:	4621      	mov	r1, r4
 8002556:	024a      	lsls	r2, r1, #9
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255e:	2200      	movs	r2, #0
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
 8002562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002568:	f7fd fe40 	bl	80001ec <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002574:	e058      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b38      	ldr	r3, [pc, #224]	; (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	2200      	movs	r2, #0
 800257e:	4618      	mov	r0, r3
 8002580:	4611      	mov	r1, r2
 8002582:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002590:	4642      	mov	r2, r8
 8002592:	464b      	mov	r3, r9
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	0159      	lsls	r1, r3, #5
 800259e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a2:	0150      	lsls	r0, r2, #5
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4641      	mov	r1, r8
 80025aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ae:	4649      	mov	r1, r9
 80025b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025c8:	ebb2 040a 	subs.w	r4, r2, sl
 80025cc:	eb63 050b 	sbc.w	r5, r3, fp
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	00eb      	lsls	r3, r5, #3
 80025da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025de:	00e2      	lsls	r2, r4, #3
 80025e0:	4614      	mov	r4, r2
 80025e2:	461d      	mov	r5, r3
 80025e4:	4643      	mov	r3, r8
 80025e6:	18e3      	adds	r3, r4, r3
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	464b      	mov	r3, r9
 80025ec:	eb45 0303 	adc.w	r3, r5, r3
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025fe:	4629      	mov	r1, r5
 8002600:	028b      	lsls	r3, r1, #10
 8002602:	4621      	mov	r1, r4
 8002604:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002608:	4621      	mov	r1, r4
 800260a:	028a      	lsls	r2, r1, #10
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002612:	2200      	movs	r2, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	61fa      	str	r2, [r7, #28]
 8002618:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800261c:	f7fd fde6 	bl	80001ec <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	3301      	adds	r3, #1
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002638:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800263a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_GetSysClockFreq+0x204>)
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800264c:	4618      	mov	r0, r3
 800264e:	3750      	adds	r7, #80	; 0x50
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	00f42400 	.word	0x00f42400
 8002660:	007a1200 	.word	0x007a1200

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_RCC_GetHCLKFreq+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000000c 	.word	0x2000000c

0800267c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002680:	f7ff fff0 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0a9b      	lsrs	r3, r3, #10
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4903      	ldr	r1, [pc, #12]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	080031d0 	.word	0x080031d0

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffdc 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0b5b      	lsrs	r3, r3, #13
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	080031d0 	.word	0x080031d0

080026cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e03f      	b.n	800275e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff faa8 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f929 	bl	8002968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b08a      	sub	sp, #40	; 0x28
 800276a:	af02      	add	r7, sp, #8
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	603b      	str	r3, [r7, #0]
 8002772:	4613      	mov	r3, r2
 8002774:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	d17c      	bne.n	8002880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_UART_Transmit+0x2c>
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e075      	b.n	8002882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x3e>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e06e      	b.n	8002882 <HAL_UART_Transmit+0x11c>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ba:	f7fe ff37 	bl	800162c <HAL_GetTick>
 80027be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	88fa      	ldrh	r2, [r7, #6]
 80027c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d4:	d108      	bne.n	80027e8 <HAL_UART_Transmit+0x82>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d104      	bne.n	80027e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e003      	b.n	80027f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027f8:	e02a      	b.n	8002850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2200      	movs	r2, #0
 8002802:	2180      	movs	r1, #128	; 0x80
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f840 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e036      	b.n	8002882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	3302      	adds	r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	e007      	b.n	8002842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	3301      	adds	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1cf      	bne.n	80027fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2140      	movs	r1, #64	; 0x40
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f810 	bl	800288a <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b090      	sub	sp, #64	; 0x40
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	e050      	b.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d04c      	beq.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
 80028aa:	f7fe febf 	bl	800162c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d241      	bcs.n	800293e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	330c      	adds	r3, #12
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028da:	637a      	str	r2, [r7, #52]	; 0x34
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e5      	bne.n	80028ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3314      	adds	r3, #20
 80028f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3314      	adds	r3, #20
 800290c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800290e:	623a      	str	r2, [r7, #32]
 8002910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	69f9      	ldr	r1, [r7, #28]
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	61bb      	str	r3, [r7, #24]
   return(result);
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e5      	bne.n	80028ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e00f      	b.n	800295e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4013      	ands	r3, r2
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	429a      	cmp	r2, r3
 800295a:	d09f      	beq.n	800289c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3740      	adds	r7, #64	; 0x40
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0c0      	sub	sp, #256	; 0x100
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	68d9      	ldr	r1, [r3, #12]
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	ea40 0301 	orr.w	r3, r0, r1
 8002990:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029c0:	f021 010c 	bic.w	r1, r1, #12
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029ce:	430b      	orrs	r3, r1
 80029d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	6999      	ldr	r1, [r3, #24]
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	ea40 0301 	orr.w	r3, r0, r1
 80029ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8f      	ldr	r3, [pc, #572]	; (8002c34 <UART_SetConfig+0x2cc>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <UART_SetConfig+0xa0>
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8d      	ldr	r3, [pc, #564]	; (8002c38 <UART_SetConfig+0x2d0>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d104      	bne.n	8002a12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a08:	f7ff fe4c 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8002a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a10:	e003      	b.n	8002a1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a12:	f7ff fe33 	bl	800267c <HAL_RCC_GetPCLK1Freq>
 8002a16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	f040 810c 	bne.w	8002c40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	1891      	adds	r1, r2, r2
 8002a40:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a42:	415b      	adcs	r3, r3
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	eb12 0801 	adds.w	r8, r2, r1
 8002a50:	4629      	mov	r1, r5
 8002a52:	eb43 0901 	adc.w	r9, r3, r1
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6a:	4690      	mov	r8, r2
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	4623      	mov	r3, r4
 8002a70:	eb18 0303 	adds.w	r3, r8, r3
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb49 0303 	adc.w	r3, r9, r3
 8002a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a96:	460b      	mov	r3, r1
 8002a98:	18db      	adds	r3, r3, r3
 8002a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	eb42 0303 	adc.w	r3, r2, r3
 8002aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002aa8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002aac:	f7fd fb9e 	bl	80001ec <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	011c      	lsls	r4, r3, #4
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002acc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	1891      	adds	r1, r2, r2
 8002ad6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ad8:	415b      	adcs	r3, r3
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002adc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0b01 	adc.w	fp, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002af8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b00:	4692      	mov	sl, r2
 8002b02:	469b      	mov	fp, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	eb1a 0303 	adds.w	r3, sl, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb4b 0303 	adc.w	r3, fp, r3
 8002b14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	18db      	adds	r3, r3, r3
 8002b30:	643b      	str	r3, [r7, #64]	; 0x40
 8002b32:	4613      	mov	r3, r2
 8002b34:	eb42 0303 	adc.w	r3, r2, r3
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b42:	f7fd fb53 	bl	80001ec <__aeabi_uldivmod>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2264      	movs	r2, #100	; 0x64
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	1acb      	subs	r3, r1, r3
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002b64:	fba3 2302 	umull	r2, r3, r3, r2
 8002b68:	095b      	lsrs	r3, r3, #5
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b70:	441c      	add	r4, r3
 8002b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b84:	4642      	mov	r2, r8
 8002b86:	464b      	mov	r3, r9
 8002b88:	1891      	adds	r1, r2, r2
 8002b8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b8c:	415b      	adcs	r3, r3
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b94:	4641      	mov	r1, r8
 8002b96:	1851      	adds	r1, r2, r1
 8002b98:	6339      	str	r1, [r7, #48]	; 0x30
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	414b      	adcs	r3, r1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bac:	4659      	mov	r1, fp
 8002bae:	00cb      	lsls	r3, r1, #3
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bb6:	4651      	mov	r1, sl
 8002bb8:	00ca      	lsls	r2, r1, #3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bc8:	464b      	mov	r3, r9
 8002bca:	460a      	mov	r2, r1
 8002bcc:	eb42 0303 	adc.w	r3, r2, r3
 8002bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002be0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002be4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002be8:	460b      	mov	r3, r1
 8002bea:	18db      	adds	r3, r3, r3
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	4613      	mov	r3, r2
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bfe:	f7fd faf5 	bl	80001ec <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	; 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <UART_SetConfig+0x2d4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4422      	add	r2, r4
 8002c2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c30:	e105      	b.n	8002e3e <UART_SetConfig+0x4d6>
 8002c32:	bf00      	nop
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c52:	4642      	mov	r2, r8
 8002c54:	464b      	mov	r3, r9
 8002c56:	1891      	adds	r1, r2, r2
 8002c58:	6239      	str	r1, [r7, #32]
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c62:	4641      	mov	r1, r8
 8002c64:	1854      	adds	r4, r2, r1
 8002c66:	4649      	mov	r1, r9
 8002c68:	eb43 0501 	adc.w	r5, r3, r1
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c88:	464b      	mov	r3, r9
 8002c8a:	eb45 0303 	adc.w	r3, r5, r3
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cae:	4629      	mov	r1, r5
 8002cb0:	008b      	lsls	r3, r1, #2
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cb8:	4621      	mov	r1, r4
 8002cba:	008a      	lsls	r2, r1, #2
 8002cbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cc0:	f7fd fa94 	bl	80001ec <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002cca:	fba3 2302 	umull	r2, r3, r3, r2
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	011c      	lsls	r4, r3, #4
 8002cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ce0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	61b9      	str	r1, [r7, #24]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6139      	str	r1, [r7, #16]
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d28:	464b      	mov	r3, r9
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	eb42 0303 	adc.w	r3, r2, r3
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d4c:	4649      	mov	r1, r9
 8002d4e:	008b      	lsls	r3, r1, #2
 8002d50:	4641      	mov	r1, r8
 8002d52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d56:	4641      	mov	r1, r8
 8002d58:	008a      	lsls	r2, r1, #2
 8002d5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d5e:	f7fd fa45 	bl	80001ec <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d68:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	2164      	movs	r1, #100	; 0x64
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	3332      	adds	r3, #50	; 0x32
 8002d7a:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d86:	441c      	add	r4, r3
 8002d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002d90:	677a      	str	r2, [r7, #116]	; 0x74
 8002d92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	1891      	adds	r1, r2, r2
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	415b      	adcs	r3, r3
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da6:	4641      	mov	r1, r8
 8002da8:	1851      	adds	r1, r2, r1
 8002daa:	6039      	str	r1, [r7, #0]
 8002dac:	4649      	mov	r1, r9
 8002dae:	414b      	adcs	r3, r1
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dbe:	4659      	mov	r1, fp
 8002dc0:	00cb      	lsls	r3, r1, #3
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc8:	4651      	mov	r1, sl
 8002dca:	00ca      	lsls	r2, r1, #3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	189b      	adds	r3, r3, r2
 8002dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd8:	464b      	mov	r3, r9
 8002dda:	460a      	mov	r2, r1
 8002ddc:	eb42 0303 	adc.w	r3, r2, r3
 8002de0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	663b      	str	r3, [r7, #96]	; 0x60
 8002dec:	667a      	str	r2, [r7, #100]	; 0x64
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	008b      	lsls	r3, r1, #2
 8002dfe:	4641      	mov	r1, r8
 8002e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e04:	4641      	mov	r1, r8
 8002e06:	008a      	lsls	r2, r1, #2
 8002e08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e0c:	f7fd f9ee 	bl	80001ec <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e16:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2164      	movs	r1, #100	; 0x64
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <UART_SetConfig+0x4e4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4422      	add	r2, r4
 8002e3c:	609a      	str	r2, [r3, #8]
}
 8002e3e:	bf00      	nop
 8002e40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e4a:	bf00      	nop
 8002e4c:	51eb851f 	.word	0x51eb851f

08002e50 <main>:

//Global Variables
DHT22_sensor DHT22_1;


int main(void) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  HAL_Init();
 8002e54:	f7fe fb8a 	bl	800156c <HAL_Init>
  SystemClock_Config(); // Configure the system clock to 180 MHz
 8002e58:	f000 f830 	bl	8002ebc <SystemClock_Config>


  uartInit();
 8002e5c:	f7fd fb48 	bl	80004f0 <uartInit>

  DHT22_1.Pin=GPIO_PIN_4;	//PE_4
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <main+0x5c>)
 8002e62:	2210      	movs	r2, #16
 8002e64:	801a      	strh	r2, [r3, #0]
  DHT22_1.Port=GPIOE;		//Port E
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <main+0x5c>)
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <main+0x60>)
 8002e6a:	605a      	str	r2, [r3, #4]
  DHT22_init(&DHT22_1);
 8002e6c:	480f      	ldr	r0, [pc, #60]	; (8002eac <main+0x5c>)
 8002e6e:	f7fd fd9d 	bl	80009ac <DHT22_init>


  BSP_LED_Init(LED2);
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7fd fcb2 	bl	80007dc <BSP_LED_Init>

  while (1) {


	  uartSendString("\r\nTemp: ");
 8002e78:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <main+0x64>)
 8002e7a:	f7fd fc07 	bl	800068c <uartSendString>
	  uartSendString(DHT22_get_temp_string(&DHT22_1));
 8002e7e:	480b      	ldr	r0, [pc, #44]	; (8002eac <main+0x5c>)
 8002e80:	f7fd fdf7 	bl	8000a72 <DHT22_get_temp_string>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fc00 	bl	800068c <uartSendString>
	  uartSendString("\r\nHum: ");
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <main+0x68>)
 8002e8e:	f7fd fbfd 	bl	800068c <uartSendString>
	  uartSendString(DHT22_get_hum_string(&DHT22_1));
 8002e92:	4806      	ldr	r0, [pc, #24]	; (8002eac <main+0x5c>)
 8002e94:	f7fd fe18 	bl	8000ac8 <DHT22_get_hum_string>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fbf6 	bl	800068c <uartSendString>

	  delay_ms(500);
 8002ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ea4:	f7fe f9ad 	bl	8001202 <delay_ms>
  while (1) {
 8002ea8:	e7e6      	b.n	8002e78 <main+0x28>
 8002eaa:	bf00      	nop
 8002eac:	2000015c 	.word	0x2000015c
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	080031a4 	.word	0x080031a4
 8002eb8:	080031b0 	.word	0x080031b0

08002ebc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b094      	sub	sp, #80	; 0x50
 8002ec0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <SystemClock_Config+0xbc>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <SystemClock_Config+0xbc>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <SystemClock_Config+0xbc>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <SystemClock_Config+0xc0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <SystemClock_Config+0xc0>)
 8002ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <SystemClock_Config+0xc0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002efe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002f02:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f04:	2302      	movs	r3, #2
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f0e:	2308      	movs	r3, #8
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002f12:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002f1c:	2307      	movs	r3, #7
 8002f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe ff39 	bl	8001d9c <HAL_RCC_OscConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 8002f30:	f000 f826 	bl	8002f80 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f34:	f7fe fee2 	bl	8001cfc <HAL_PWREx_EnableOverDrive>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 8002f3e:	f000 f81f 	bl	8002f80 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002f42:	230f      	movs	r3, #15
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f46:	2302      	movs	r3, #2
 8002f48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8002f4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f5e:	2105      	movs	r1, #5
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f993 	bl	800228c <HAL_RCC_ClockConfig>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002f6c:	f000 f808 	bl	8002f80 <Error_Handler>
  }
}
 8002f70:	bf00      	nop
 8002f72:	3750      	adds	r7, #80	; 0x50
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40007000 	.word	0x40007000

08002f80 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7fd fc79 	bl	800087c <BSP_LED_On>
  while (1)
 8002f8a:	e7fe      	b.n	8002f8a <Error_Handler+0xa>

08002f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f92:	e003      	b.n	8002f9c <LoopCopyDataInit>

08002f94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f9a:	3104      	adds	r1, #4

08002f9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fa4:	d3f6      	bcc.n	8002f94 <CopyDataInit>
  ldr  r2, =_sbss
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fa8:	e002      	b.n	8002fb0 <LoopFillZerobss>

08002faa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002faa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002fac:	f842 3b04 	str.w	r3, [r2], #4

08002fb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002fb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002fb4:	d3f9      	bcc.n	8002faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fb6:	f7fd fc95 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fba:	f000 f811 	bl	8002fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fbe:	f7ff ff47 	bl	8002e50 <main>
  bx  lr    
 8002fc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002fc4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002fc8:	080031e8 	.word	0x080031e8
  ldr  r0, =_sdata
 8002fcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fd0:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8002fd4:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8002fd8:	200001d8 	.word	0x200001d8

08002fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC_IRQHandler>
	...

08002fe0 <__libc_init_array>:
 8002fe0:	b570      	push	{r4, r5, r6, lr}
 8002fe2:	4d0d      	ldr	r5, [pc, #52]	; (8003018 <__libc_init_array+0x38>)
 8002fe4:	4c0d      	ldr	r4, [pc, #52]	; (800301c <__libc_init_array+0x3c>)
 8002fe6:	1b64      	subs	r4, r4, r5
 8002fe8:	10a4      	asrs	r4, r4, #2
 8002fea:	2600      	movs	r6, #0
 8002fec:	42a6      	cmp	r6, r4
 8002fee:	d109      	bne.n	8003004 <__libc_init_array+0x24>
 8002ff0:	4d0b      	ldr	r5, [pc, #44]	; (8003020 <__libc_init_array+0x40>)
 8002ff2:	4c0c      	ldr	r4, [pc, #48]	; (8003024 <__libc_init_array+0x44>)
 8002ff4:	f000 f818 	bl	8003028 <_init>
 8002ff8:	1b64      	subs	r4, r4, r5
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	2600      	movs	r6, #0
 8002ffe:	42a6      	cmp	r6, r4
 8003000:	d105      	bne.n	800300e <__libc_init_array+0x2e>
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	f855 3b04 	ldr.w	r3, [r5], #4
 8003008:	4798      	blx	r3
 800300a:	3601      	adds	r6, #1
 800300c:	e7ee      	b.n	8002fec <__libc_init_array+0xc>
 800300e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003012:	4798      	blx	r3
 8003014:	3601      	adds	r6, #1
 8003016:	e7f2      	b.n	8002ffe <__libc_init_array+0x1e>
 8003018:	080031e0 	.word	0x080031e0
 800301c:	080031e0 	.word	0x080031e0
 8003020:	080031e0 	.word	0x080031e0
 8003024:	080031e4 	.word	0x080031e4

08003028 <_init>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr

08003034 <_fini>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr
