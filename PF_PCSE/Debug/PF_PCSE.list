
PF_PCSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003754  08003754  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800375c  0800375c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000f8  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e56f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000215b  00000000  00000000  0002e5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb0  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000346a  00000000  00000000  00032148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b1e  00000000  00000000  000355b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea121  00000000  00000000  000480d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001321f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003704  00000000  00000000  00132244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003598 	.word	0x08003598

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08003598 	.word	0x08003598

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <uartInit>:
/*
* @brief  Inicializa la UART. Envía parametros de inicialización por UART
* @param  None
* @retval true:UART se inicializó correctamente, false:falla al inicializar UART
*/
bool_t uartInit(void){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

	UartHandle.Instance        = USARTx;
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <uartInit+0x54>)
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <uartInit+0x58>)
 80004f8:	601a      	str	r2, [r3, #0]

	UartHandle.Init.BaudRate   		= BAUDRATE;
 80004fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <uartInit+0x54>)
 8000500:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength 		= WORD_LENGTH;
 8000502:	2200      	movs	r2, #0
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <uartInit+0x54>)
 8000506:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   		= STOP_BITS;
 8000508:	2200      	movs	r2, #0
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <uartInit+0x54>)
 800050c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     		= PARITY;
 800050e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <uartInit+0x54>)
 8000514:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  		= HW_FLOW_CTL;
 8000516:	2200      	movs	r2, #0
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <uartInit+0x54>)
 800051a:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       		= UART_MODE_TX_RX;
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <uartInit+0x54>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling 	= 16;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <uartInit+0x54>)
 8000524:	2210      	movs	r2, #16
 8000526:	61da      	str	r2, [r3, #28]

	/*Inicializar UART --------------------------------------------*/
	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <uartInit+0x54>)
 800052a:	f002 fb91 	bl	8002c50 <HAL_UART_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <uartInit+0x48>
	  return 0;
 8000534:	2300      	movs	r3, #0
 8000536:	e002      	b.n	800053e <uartInit+0x4e>
	}
	send_init_data();
 8000538:	f000 f808 	bl	800054c <send_init_data>
	return 1;
 800053c:	2301      	movs	r3, #1
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000034 	.word	0x20000034
 8000548:	40004800 	.word	0x40004800

0800054c <send_init_data>:
/*
* @brief  Envia parámetros de configuración por UART
* @param  None
* @retval None
*/
void send_init_data(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	uartSendString("\r\n>> UART inicializado correctamente\r\n");
 8000550:	483a      	ldr	r0, [pc, #232]	; (800063c <send_init_data+0xf0>)
 8000552:	f000 f89b 	bl	800068c <uartSendString>
	uartSendString(">> Parametros de configuracion UART:\r\n");
 8000556:	483a      	ldr	r0, [pc, #232]	; (8000640 <send_init_data+0xf4>)
 8000558:	f000 f898 	bl	800068c <uartSendString>
	uartSendString("    > BAUDRATE:  ");
 800055c:	4839      	ldr	r0, [pc, #228]	; (8000644 <send_init_data+0xf8>)
 800055e:	f000 f895 	bl	800068c <uartSendString>
	uartSendString(uint_to_string(BAUDRATE));
 8000562:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f8e0 	bl	800072c <uint_to_string>
 800056c:	4603      	mov	r3, r0
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f88c 	bl	800068c <uartSendString>
	uartSendString("\r\n    > WORD_LENGTH:  ");
 8000574:	4834      	ldr	r0, [pc, #208]	; (8000648 <send_init_data+0xfc>)
 8000576:	f000 f889 	bl	800068c <uartSendString>
	if(WORD_LENGTH==UART_WORDLENGTH_8B){
 800057a:	2300      	movs	r3, #0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d103      	bne.n	8000588 <send_init_data+0x3c>
		uartSendString("8bits\r\n");
 8000580:	4832      	ldr	r0, [pc, #200]	; (800064c <send_init_data+0x100>)
 8000582:	f000 f883 	bl	800068c <uartSendString>
 8000586:	e002      	b.n	800058e <send_init_data+0x42>
	}else{
		uartSendString("9bits\r\n");
 8000588:	4831      	ldr	r0, [pc, #196]	; (8000650 <send_init_data+0x104>)
 800058a:	f000 f87f 	bl	800068c <uartSendString>
	}
	uartSendString("    > STOP_BITS:  ");
 800058e:	4831      	ldr	r0, [pc, #196]	; (8000654 <send_init_data+0x108>)
 8000590:	f000 f87c 	bl	800068c <uartSendString>
	if(STOP_BITS==UART_STOPBITS_1){
 8000594:	2300      	movs	r3, #0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <send_init_data+0x56>
		uartSendString("1\r\n");
 800059a:	482f      	ldr	r0, [pc, #188]	; (8000658 <send_init_data+0x10c>)
 800059c:	f000 f876 	bl	800068c <uartSendString>
 80005a0:	e002      	b.n	80005a8 <send_init_data+0x5c>
	}else{
		uartSendString("2\r\n");
 80005a2:	482e      	ldr	r0, [pc, #184]	; (800065c <send_init_data+0x110>)
 80005a4:	f000 f872 	bl	800068c <uartSendString>
	}
	uartSendString("    > PARITY:  ");
 80005a8:	482d      	ldr	r0, [pc, #180]	; (8000660 <send_init_data+0x114>)
 80005aa:	f000 f86f 	bl	800068c <uartSendString>
	if(PARITY==UART_PARITY_ODD){
 80005ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80005b6:	d103      	bne.n	80005c0 <send_init_data+0x74>
		uartSendString("ODD\r\n");
 80005b8:	482a      	ldr	r0, [pc, #168]	; (8000664 <send_init_data+0x118>)
 80005ba:	f000 f867 	bl	800068c <uartSendString>
 80005be:	e00b      	b.n	80005d8 <send_init_data+0x8c>
	}else if(PARITY==UART_PARITY_EVEN){
 80005c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005c8:	d103      	bne.n	80005d2 <send_init_data+0x86>
		uartSendString("EVEN\r\n");
 80005ca:	4827      	ldr	r0, [pc, #156]	; (8000668 <send_init_data+0x11c>)
 80005cc:	f000 f85e 	bl	800068c <uartSendString>
 80005d0:	e002      	b.n	80005d8 <send_init_data+0x8c>
	}else {
		uartSendString("NONE\r\n");
 80005d2:	4826      	ldr	r0, [pc, #152]	; (800066c <send_init_data+0x120>)
 80005d4:	f000 f85a 	bl	800068c <uartSendString>
	}
	uartSendString("    > HW_FLOW_CTL:  ");
 80005d8:	4825      	ldr	r0, [pc, #148]	; (8000670 <send_init_data+0x124>)
 80005da:	f000 f857 	bl	800068c <uartSendString>
	switch(HW_FLOW_CTL){
 80005de:	2300      	movs	r3, #0
 80005e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005e4:	d01a      	beq.n	800061c <send_init_data+0xd0>
 80005e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005ea:	d81b      	bhi.n	8000624 <send_init_data+0xd8>
 80005ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f0:	d010      	beq.n	8000614 <send_init_data+0xc8>
 80005f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f6:	d815      	bhi.n	8000624 <send_init_data+0xd8>
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d003      	beq.n	8000604 <send_init_data+0xb8>
 80005fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000600:	d004      	beq.n	800060c <send_init_data+0xc0>
 8000602:	e00f      	b.n	8000624 <send_init_data+0xd8>
		case UART_HWCONTROL_NONE:
			uartSendString("NONE\r\n");
 8000604:	4819      	ldr	r0, [pc, #100]	; (800066c <send_init_data+0x120>)
 8000606:	f000 f841 	bl	800068c <uartSendString>
		break;
 800060a:	e00f      	b.n	800062c <send_init_data+0xe0>
		case UART_HWCONTROL_RTS:
			uartSendString("RTS\r\n");
 800060c:	4819      	ldr	r0, [pc, #100]	; (8000674 <send_init_data+0x128>)
 800060e:	f000 f83d 	bl	800068c <uartSendString>
		break;
 8000612:	e00b      	b.n	800062c <send_init_data+0xe0>
		case UART_HWCONTROL_CTS:
			uartSendString("CTS\r\n");
 8000614:	4818      	ldr	r0, [pc, #96]	; (8000678 <send_init_data+0x12c>)
 8000616:	f000 f839 	bl	800068c <uartSendString>
		break;
 800061a:	e007      	b.n	800062c <send_init_data+0xe0>
		case UART_HWCONTROL_RTS_CTS:
			uartSendString("RTS-CTS\r\n");
 800061c:	4817      	ldr	r0, [pc, #92]	; (800067c <send_init_data+0x130>)
 800061e:	f000 f835 	bl	800068c <uartSendString>
		break;
 8000622:	e003      	b.n	800062c <send_init_data+0xe0>
		default:
			uartSendString("Error en reconocer HW_Control");
 8000624:	4816      	ldr	r0, [pc, #88]	; (8000680 <send_init_data+0x134>)
 8000626:	f000 f831 	bl	800068c <uartSendString>
		break;
 800062a:	bf00      	nop
	}
	uartSendString("    > UART_MODE:  UART_MODE_TX_RX\r\n");
 800062c:	4815      	ldr	r0, [pc, #84]	; (8000684 <send_init_data+0x138>)
 800062e:	f000 f82d 	bl	800068c <uartSendString>
	uartSendString("    > OVER_SAMPLING:  16\r\n");
 8000632:	4815      	ldr	r0, [pc, #84]	; (8000688 <send_init_data+0x13c>)
 8000634:	f000 f82a 	bl	800068c <uartSendString>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	080035b0 	.word	0x080035b0
 8000640:	080035d8 	.word	0x080035d8
 8000644:	08003600 	.word	0x08003600
 8000648:	08003614 	.word	0x08003614
 800064c:	0800362c 	.word	0x0800362c
 8000650:	08003634 	.word	0x08003634
 8000654:	0800363c 	.word	0x0800363c
 8000658:	08003650 	.word	0x08003650
 800065c:	08003654 	.word	0x08003654
 8000660:	08003658 	.word	0x08003658
 8000664:	08003668 	.word	0x08003668
 8000668:	08003670 	.word	0x08003670
 800066c:	08003678 	.word	0x08003678
 8000670:	08003680 	.word	0x08003680
 8000674:	08003698 	.word	0x08003698
 8000678:	080036a0 	.word	0x080036a0
 800067c:	080036a8 	.word	0x080036a8
 8000680:	080036b4 	.word	0x080036b4
 8000684:	080036d4 	.word	0x080036d4
 8000688:	080036f8 	.word	0x080036f8

0800068c <uartSendString>:
/*
* @brief  Envía un String por UART. Longitud máxima del array definida por UART_LONG_MAX (incluyendo el '\0')
* @param  Puntero a cadena de caracteres a enviar
* @retval None
*/
void uartSendString(uint8_t * pstring){
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	if(pstring!=0){
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d029      	beq.n	80006ee <uartSendString+0x62>
		uint16_t size=0;
 800069a:	2300      	movs	r3, #0
 800069c:	81fb      	strh	r3, [r7, #14]
		bool_t is_string=0;
 800069e:	2300      	movs	r3, #0
 80006a0:	737b      	strb	r3, [r7, #13]
		for(int i=0;i<UART_LONG_MAX;i++){
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	e00e      	b.n	80006c6 <uartSendString+0x3a>
			if(pstring[i]=='\0'){
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d105      	bne.n	80006c0 <uartSendString+0x34>
				is_string=1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	737b      	strb	r3, [r7, #13]
				size=i;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	81fb      	strh	r3, [r7, #14]
				i=UART_LONG_MAX;
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	60bb      	str	r3, [r7, #8]
		for(int i=0;i<UART_LONG_MAX;i++){
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2b63      	cmp	r3, #99	; 0x63
 80006ca:	dded      	ble.n	80006a8 <uartSendString+0x1c>
			}
		}
		if(is_string==0){	//Convertir en String y recortar
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	f083 0301 	eor.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <uartSendString+0x58>
			pstring[UART_LONG_MAX-1]='\0';
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3363      	adds	r3, #99	; 0x63
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
			size=UART_LONG_MAX-1;
 80006e0:	2363      	movs	r3, #99	; 0x63
 80006e2:	81fb      	strh	r3, [r7, #14]
		}

		uartSendStringSize(pstring, size);
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	4619      	mov	r1, r3
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f805 	bl	80006f8 <uartSendStringSize>
	} else {
		/* Control de Error*/
	}
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <uartSendStringSize>:
* @brief  Envía String por UART. Longitud máxima del array definida por UART_LONG_MAX (incluyendo el '\0')
* @param  puntero al string a enviar
* @param  cantidad de caracteres a enviar
* @retval None
*/
void uartSendStringSize(uint8_t * pstring, uint16_t size){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	if(pstring!=0 && size>0){
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d009      	beq.n	800071e <uartSendStringSize+0x26>
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d006      	beq.n	800071e <uartSendStringSize+0x26>
		HAL_UART_Transmit(&UartHandle, pstring, size, 0xffff);
 8000710:	887a      	ldrh	r2, [r7, #2]
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <uartSendStringSize+0x30>)
 800071a:	f002 fae6 	bl	8002cea <HAL_UART_Transmit>
	} else {
		/*Control de Errror*/
	}
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000034 	.word	0x20000034

0800072c <uint_to_string>:
/*
* @brief  Función para convertir uint a string
* @param  Número a convertir
* @retval Número en forma de String (con '\0' al final)
*/
static uint8_t *uint_to_string(uint32_t numero){
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	uint32_t divisor;
	uint8_t Exp_divisor;
	uint32_t digito;
	uint8_t i = 0;	/*Posición en el string*/
 8000734:	2300      	movs	r3, #0
 8000736:	74fb      	strb	r3, [r7, #19]
	bool_t  start_num = 0;	/*Var aux para eliminar 0's a izquierda del dígito significativo*/
 8000738:	2300      	movs	r3, #0
 800073a:	74bb      	strb	r3, [r7, #18]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 800073c:	2300      	movs	r3, #0
 800073e:	747b      	strb	r3, [r7, #17]
 8000740:	e039      	b.n	80007b6 <uint_to_string+0x8a>
		Exp_divisor = 9 - posicion;
 8000742:	7c7b      	ldrb	r3, [r7, #17]
 8000744:	f1c3 0309 	rsb	r3, r3, #9
 8000748:	73fb      	strb	r3, [r7, #15]

		/*divisor=10^Exp_divisor*/
		divisor = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 800074e:	2300      	movs	r3, #0
 8000750:	743b      	strb	r3, [r7, #16]
 8000752:	e008      	b.n	8000766 <uint_to_string+0x3a>
			divisor = divisor * 10;
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 8000760:	7c3b      	ldrb	r3, [r7, #16]
 8000762:	3301      	adds	r3, #1
 8000764:	743b      	strb	r3, [r7, #16]
 8000766:	7c3a      	ldrb	r2, [r7, #16]
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3f2      	bcc.n	8000754 <uint_to_string+0x28>
		}

		digito = (numero/divisor)%10;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fbb2 f2f3 	udiv	r2, r2, r3
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <uint_to_string+0xa8>)
 8000778:	fba3 1302 	umull	r1, r3, r3, r2
 800077c:	08d9      	lsrs	r1, r3, #3
 800077e:	460b      	mov	r3, r1
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	440b      	add	r3, r1
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	60bb      	str	r3, [r7, #8]
		if(digito!=0||start_num!=0){
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <uint_to_string+0x6a>
 8000790:	7cbb      	ldrb	r3, [r7, #18]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00c      	beq.n	80007b0 <uint_to_string+0x84>
			string_uint[i++] = digito + '0';
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	7cfb      	ldrb	r3, [r7, #19]
 800079c:	1c59      	adds	r1, r3, #1
 800079e:	74f9      	strb	r1, [r7, #19]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <uint_to_string+0xac>)
 80007aa:	545a      	strb	r2, [r3, r1]
			start_num = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	74bb      	strb	r3, [r7, #18]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 80007b0:	7c7b      	ldrb	r3, [r7, #17]
 80007b2:	3301      	adds	r3, #1
 80007b4:	747b      	strb	r3, [r7, #17]
 80007b6:	7c7b      	ldrb	r3, [r7, #17]
 80007b8:	2b09      	cmp	r3, #9
 80007ba:	d9c2      	bls.n	8000742 <uint_to_string+0x16>
		}
	}
	string_uint[i] = '\0';
 80007bc:	7cfb      	ldrb	r3, [r7, #19]
 80007be:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <uint_to_string+0xac>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	54d1      	strb	r1, [r2, r3]
	return string_uint;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <uint_to_string+0xac>)
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	371c      	adds	r7, #28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	cccccccd 	.word	0xcccccccd
 80007d8:	20000078 	.word	0x20000078

080007dc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <BSP_LED_On+0x2c>)
 80007ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <BSP_LED_On+0x30>)
 80007f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4619      	mov	r1, r3
 80007fa:	f001 f829 	bl	8001850 <HAL_GPIO_WritePin>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000
 800080c:	08003734 	.word	0x08003734

08000810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <SystemInit+0x60>)
 8000816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <SystemInit+0x60>)
 800081c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <SystemInit+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <SystemInit+0x64>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <SystemInit+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <SystemInit+0x64>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <SystemInit+0x64>)
 800083c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000844:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <SystemInit+0x64>)
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <SystemInit+0x68>)
 800084a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <SystemInit+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a08      	ldr	r2, [pc, #32]	; (8000874 <SystemInit+0x64>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SystemInit+0x60>)
 8000860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000864:	609a      	str	r2, [r3, #8]
#endif
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00
 8000874:	40023800 	.word	0x40023800
 8000878:	24003010 	.word	0x24003010

0800087c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800088e:	e7fe      	b.n	800088e <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000894:	e7fe      	b.n	8000894 <MemManage_Handler+0x4>

08000896 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800089a:	e7fe      	b.n	800089a <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80008d0:	f000 fce8 	bl	80012a4 <HAL_IncTick>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <DHT22_init>:
 * @brief	Inicializa las funciones de lectura del DHT22 en el GPIO asignado
 * @param	Número de GPIO del Port. Revisar HAL o datsheet para obtener el número de cada pin.
 * @param	Valores válidos PORT_A a PORT_G
 * @return	True si se inició correctamente. Sino regresa False
 */
bool_t DHT22_init(uint16_t _pin, uint8_t _port){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	460a      	mov	r2, r1
 80008e2:	80fb      	strh	r3, [r7, #6]
 80008e4:	4613      	mov	r3, r2
 80008e6:	717b      	strb	r3, [r7, #5]
	if(is_pin(_pin)){
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fb05 	bl	8000efa <is_pin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d035      	beq.n	8000962 <DHT22_init+0x8a>

		_DHT22.Pin=_pin;
 80008f6:	4a1d      	ldr	r2, [pc, #116]	; (800096c <DHT22_init+0x94>)
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	8013      	strh	r3, [r2, #0]
		_DHT22.Port=_port;
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <DHT22_init+0x94>)
 80008fe:	797b      	ldrb	r3, [r7, #5]
 8000900:	7093      	strb	r3, [r2, #2]

		_DHT22.data.temp = 0;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <DHT22_init+0x94>)
 8000904:	f04f 0200 	mov.w	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
		_DHT22.data.temp_string[0] = '\0';
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <DHT22_init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	721a      	strb	r2, [r3, #8]
		_DHT22.data.hum  = 0;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <DHT22_init+0x94>)
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
		_DHT22.data.hum_string[0]  = '\0';
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <DHT22_init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	751a      	strb	r2, [r3, #20]
		_DHT22.data.crude = 0;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <DHT22_init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
		_DHT22.data.validation = 0;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <DHT22_init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2020 	strb.w	r2, [r3, #32]
		_DHT22.time_last_call = 0;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <DHT22_init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
		_DHT22.status = DHT_OK;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <DHT22_init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		GPIO_set_config(_DHT22.Port, _DHT22.Pin);
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <DHT22_init+0x94>)
 800093c:	789b      	ldrb	r3, [r3, #2]
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <DHT22_init+0x94>)
 8000940:	8812      	ldrh	r2, [r2, #0]
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f9b6 	bl	8000cb8 <GPIO_set_config>

		GPIO_write(_DHT22.Port, _DHT22.Pin, 1);
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <DHT22_init+0x94>)
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <DHT22_init+0x94>)
 8000952:	8812      	ldrh	r2, [r2, #0]
 8000954:	b2d1      	uxtb	r1, r2
 8000956:	2201      	movs	r2, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f000 faa5 	bl	8000ea8 <GPIO_write>

		return 1;
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <DHT22_init+0x8c>
	}
	return 0;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000084 	.word	0x20000084

08000970 <DHT22_get_temp_string>:

/*
 * @brief	Solicita el valor de temperatura
 * @return	Temperatura en grados celcius en formato String
 */
uint8_t * DHT22_get_temp_string(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	if(_DHT22.status == DHT_OK){
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <DHT22_get_temp_string+0x1c>)
 8000976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <DHT22_get_temp_string+0x16>
		decodificar();
 800097e:	f000 f81f 	bl	80009c0 <decodificar>
		return _DHT22.data.temp_string;
 8000982:	4b03      	ldr	r3, [pc, #12]	; (8000990 <DHT22_get_temp_string+0x20>)
 8000984:	e000      	b.n	8000988 <DHT22_get_temp_string+0x18>
	} else {
		return (uint8_t *)"Null";
 8000986:	4b03      	ldr	r3, [pc, #12]	; (8000994 <DHT22_get_temp_string+0x24>)
	}
}
 8000988:	4618      	mov	r0, r3
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000084 	.word	0x20000084
 8000990:	2000008c 	.word	0x2000008c
 8000994:	08003714 	.word	0x08003714

08000998 <DHT22_get_hum_string>:

/*
 * @brief	Solicita el valor de humedad
 * @return	Humedad en formato String
 */
uint8_t * DHT22_get_hum_string(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	if(_DHT22.status == DHT_OK){
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <DHT22_get_hum_string+0x1c>)
 800099e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <DHT22_get_hum_string+0x16>
		decodificar();
 80009a6:	f000 f80b 	bl	80009c0 <decodificar>
		return _DHT22.data.hum_string;
 80009aa:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <DHT22_get_hum_string+0x20>)
 80009ac:	e000      	b.n	80009b0 <DHT22_get_hum_string+0x18>
	} else {
		return (uint8_t *)"Null";
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <DHT22_get_hum_string+0x24>)
	}
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000084 	.word	0x20000084
 80009b8:	20000098 	.word	0x20000098
 80009bc:	08003714 	.word	0x08003714

080009c0 <decodificar>:

/*
 * @brief	Traduce los valores guardados en _DHT22.data.crude
 * @Note	No se contempla la verificación de la comunicación
 */
static void decodificar(void){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0

	float humidity = (float)(_DHT22.data.crude/(1<<16));
 80009c6:	4b53      	ldr	r3, [pc, #332]	; (8000b14 <decodificar+0x154>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	0c1b      	lsrs	r3, r3, #16
 80009cc:	ee07 3a90 	vmov	s15, r3
 80009d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009d4:	edc7 7a03 	vstr	s15, [r7, #12]
	humidity = humidity/10;
 80009d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80009dc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80009e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009e4:	edc7 7a03 	vstr	s15, [r7, #12]
	float temperature = (float)(_DHT22.data.crude%(1<<15));
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <decodificar+0x154>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009f8:	edc7 7a02 	vstr	s15, [r7, #8]
	temperature = temperature/10;
 80009fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a00:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a08:	edc7 7a02 	vstr	s15, [r7, #8]
	_DHT22.data.hum = humidity;
 8000a0c:	4a41      	ldr	r2, [pc, #260]	; (8000b14 <decodificar+0x154>)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6113      	str	r3, [r2, #16]
	_DHT22.data.temp = temperature;
 8000a12:	4a40      	ldr	r2, [pc, #256]	; (8000b14 <decodificar+0x154>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	6053      	str	r3, [r2, #4]

	/*variables tipo string*/
	uint8_t * data_string = uint_to_string((uint32_t)(humidity*10));
 8000a18:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a28:	ee17 0a90 	vmov	r0, s15
 8000a2c:	f000 f874 	bl	8000b18 <uint_to_string>
 8000a30:	6078      	str	r0, [r7, #4]
	if(humidity<10){
 8000a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a42:	d511      	bpl.n	8000a68 <decodificar+0xa8>
		_DHT22.data.hum_string[0]=data_string[0];
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <decodificar+0x154>)
 8000a4a:	751a      	strb	r2, [r3, #20]
		_DHT22.data.hum_string[1]=',';
 8000a4c:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <decodificar+0x154>)
 8000a4e:	222c      	movs	r2, #44	; 0x2c
 8000a50:	755a      	strb	r2, [r3, #21]
		_DHT22.data.hum_string[2]=data_string[1];
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	785a      	ldrb	r2, [r3, #1]
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <decodificar+0x154>)
 8000a58:	759a      	strb	r2, [r3, #22]
		_DHT22.data.hum_string[3]='%';
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <decodificar+0x154>)
 8000a5c:	2225      	movs	r2, #37	; 0x25
 8000a5e:	75da      	strb	r2, [r3, #23]
		_DHT22.data.hum_string[4]='\0';
 8000a60:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <decodificar+0x154>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	761a      	strb	r2, [r3, #24]
 8000a66:	e014      	b.n	8000a92 <decodificar+0xd2>
	} else {
		_DHT22.data.hum_string[0]=data_string[0];
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <decodificar+0x154>)
 8000a6e:	751a      	strb	r2, [r3, #20]
		_DHT22.data.hum_string[1]=data_string[1];
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	785a      	ldrb	r2, [r3, #1]
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <decodificar+0x154>)
 8000a76:	755a      	strb	r2, [r3, #21]
		_DHT22.data.hum_string[2]=',';
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <decodificar+0x154>)
 8000a7a:	222c      	movs	r2, #44	; 0x2c
 8000a7c:	759a      	strb	r2, [r3, #22]
		_DHT22.data.hum_string[3]=data_string[2];
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	789a      	ldrb	r2, [r3, #2]
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <decodificar+0x154>)
 8000a84:	75da      	strb	r2, [r3, #23]
		_DHT22.data.hum_string[4]='%';
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <decodificar+0x154>)
 8000a88:	2225      	movs	r2, #37	; 0x25
 8000a8a:	761a      	strb	r2, [r3, #24]
		_DHT22.data.hum_string[5]='\0';
 8000a8c:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <decodificar+0x154>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	765a      	strb	r2, [r3, #25]
	}

	data_string = uint_to_string((uint32_t)(temperature*10));
 8000a92:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a96:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa2:	ee17 0a90 	vmov	r0, s15
 8000aa6:	f000 f837 	bl	8000b18 <uint_to_string>
 8000aaa:	6078      	str	r0, [r7, #4]
	if(temperature<10){
 8000aac:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ab0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000abc:	d511      	bpl.n	8000ae2 <decodificar+0x122>
		_DHT22.data.temp_string[0]=data_string[0];
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <decodificar+0x154>)
 8000ac4:	721a      	strb	r2, [r3, #8]
		_DHT22.data.temp_string[1]=',';
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <decodificar+0x154>)
 8000ac8:	222c      	movs	r2, #44	; 0x2c
 8000aca:	725a      	strb	r2, [r3, #9]
		_DHT22.data.temp_string[2]=data_string[1];
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	785a      	ldrb	r2, [r3, #1]
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <decodificar+0x154>)
 8000ad2:	729a      	strb	r2, [r3, #10]
		_DHT22.data.temp_string[3]='C';	/*No toma el '°'*/
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <decodificar+0x154>)
 8000ad6:	2243      	movs	r2, #67	; 0x43
 8000ad8:	72da      	strb	r2, [r3, #11]
		_DHT22.data.temp_string[4]='\0';
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <decodificar+0x154>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	731a      	strb	r2, [r3, #12]
		_DHT22.data.temp_string[2]=',';
		_DHT22.data.temp_string[3]=data_string[2];
		_DHT22.data.temp_string[4]='C';	/*No toma el '°'*/
		_DHT22.data.temp_string[5]='\0';
	}
}
 8000ae0:	e014      	b.n	8000b0c <decodificar+0x14c>
		_DHT22.data.temp_string[0]=data_string[0];
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <decodificar+0x154>)
 8000ae8:	721a      	strb	r2, [r3, #8]
		_DHT22.data.temp_string[1]=data_string[1];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	785a      	ldrb	r2, [r3, #1]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <decodificar+0x154>)
 8000af0:	725a      	strb	r2, [r3, #9]
		_DHT22.data.temp_string[2]=',';
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <decodificar+0x154>)
 8000af4:	222c      	movs	r2, #44	; 0x2c
 8000af6:	729a      	strb	r2, [r3, #10]
		_DHT22.data.temp_string[3]=data_string[2];
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	789a      	ldrb	r2, [r3, #2]
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <decodificar+0x154>)
 8000afe:	72da      	strb	r2, [r3, #11]
		_DHT22.data.temp_string[4]='C';	/*No toma el '°'*/
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <decodificar+0x154>)
 8000b02:	2243      	movs	r2, #67	; 0x43
 8000b04:	731a      	strb	r2, [r3, #12]
		_DHT22.data.temp_string[5]='\0';
 8000b06:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <decodificar+0x154>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	735a      	strb	r2, [r3, #13]
}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000084 	.word	0x20000084

08000b18 <uint_to_string>:
/*
 * @brief	Convierte entero sin signo a String
 * @param	Número a convertir
 * @return	Número en formato String
 */
uint8_t * uint_to_string(uint32_t numero){
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	uint32_t divisor;		/* Divisor potencia de 10 para "desplazar la coma" en sistema decimal	*/
	uint8_t Exp_divisor;	/* Exponente del divisor, define la potencia de 10						*/
	uint32_t digito;		/* Dígito del 0 al 9 sin codificación ASCII								*/
	uint8_t i = 0;			/* Posición en el string												*/
 8000b20:	2300      	movs	r3, #0
 8000b22:	74fb      	strb	r3, [r7, #19]
	bool_t  start_num = 0;	/* Var aux para eliminar 0's a izquierda del dígito significativo		*/
 8000b24:	2300      	movs	r3, #0
 8000b26:	74bb      	strb	r3, [r7, #18]
	string_uint[0]='\0';
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <uint_to_string+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 8000b2e:	2300      	movs	r3, #0
 8000b30:	747b      	strb	r3, [r7, #17]
 8000b32:	e039      	b.n	8000ba8 <uint_to_string+0x90>
		Exp_divisor = 9 - posicion;
 8000b34:	7c7b      	ldrb	r3, [r7, #17]
 8000b36:	f1c3 0309 	rsb	r3, r3, #9
 8000b3a:	73fb      	strb	r3, [r7, #15]

		/*divisor=10^Exp_divisor*/
		divisor = 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 8000b40:	2300      	movs	r3, #0
 8000b42:	743b      	strb	r3, [r7, #16]
 8000b44:	e008      	b.n	8000b58 <uint_to_string+0x40>
			divisor = divisor * 10;
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
		for(uint8_t j=0 ; j<Exp_divisor ; j++){
 8000b52:	7c3b      	ldrb	r3, [r7, #16]
 8000b54:	3301      	adds	r3, #1
 8000b56:	743b      	strb	r3, [r7, #16]
 8000b58:	7c3a      	ldrb	r2, [r7, #16]
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3f2      	bcc.n	8000b46 <uint_to_string+0x2e>
		}

		digito = (numero/divisor)%10;
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <uint_to_string+0xc4>)
 8000b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b6e:	08d9      	lsrs	r1, r3, #3
 8000b70:	460b      	mov	r3, r1
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	440b      	add	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	60bb      	str	r3, [r7, #8]
		if(digito!=0||start_num!=0){
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <uint_to_string+0x70>
 8000b82:	7cbb      	ldrb	r3, [r7, #18]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00c      	beq.n	8000ba2 <uint_to_string+0x8a>
			string_uint[i++] = digito + '0';	/* Agregar dígito al String en código ASCII			*/
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	7cfb      	ldrb	r3, [r7, #19]
 8000b8e:	1c59      	adds	r1, r3, #1
 8000b90:	74f9      	strb	r1, [r7, #19]
 8000b92:	4619      	mov	r1, r3
 8000b94:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <uint_to_string+0xc0>)
 8000b9c:	545a      	strb	r2, [r3, r1]
			start_num = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	74bb      	strb	r3, [r7, #18]
	for(uint8_t posicion=0 ; posicion<10 ; posicion++){
 8000ba2:	7c7b      	ldrb	r3, [r7, #17]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	747b      	strb	r3, [r7, #17]
 8000ba8:	7c7b      	ldrb	r3, [r7, #17]
 8000baa:	2b09      	cmp	r3, #9
 8000bac:	d9c2      	bls.n	8000b34 <uint_to_string+0x1c>
		}
	}

	/*Si el número original fue 0*/
	if(string_uint[0]=='\0'){
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <uint_to_string+0xc0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d104      	bne.n	8000bc0 <uint_to_string+0xa8>
		string_uint[0]='0';
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <uint_to_string+0xc0>)
 8000bb8:	2230      	movs	r2, #48	; 0x30
 8000bba:	701a      	strb	r2, [r3, #0]
		i=1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	74fb      	strb	r3, [r7, #19]
	}

	string_uint[i] = '\0';
 8000bc0:	7cfb      	ldrb	r3, [r7, #19]
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <uint_to_string+0xc0>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	54d1      	strb	r1, [r2, r3]
	return string_uint;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <uint_to_string+0xc0>)
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200000b0 	.word	0x200000b0
 8000bdc:	cccccccd 	.word	0xcccccccd

08000be0 <delay_ms>:

/*
 * @brief	Delay en milisegundos
 * @param	Tiempo en ms a esperar
 */
void delay_ms(uint32_t delay) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	port_delay_ms(delay);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 fa55 	bl	8001098 <port_delay_ms>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <_HAL_PORT_DECODE>:
/*
 * @brief	Convierte variable PORT definida en DHT22.h a variable utilizada por la HAL para dicho puerto
 * @param	PORT_A a PORT_G
 * @param	Puntero a estructura PORT
 */
GPIO_TypeDef  * _HAL_PORT_DECODE(uint8_t Port){
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef  * _HAL_PORT;
	switch (Port){
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d81f      	bhi.n	8000c86 <_HAL_PORT_DECODE+0x52>
 8000c46:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <_HAL_PORT_DECODE+0x18>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000c65 	.word	0x08000c65
 8000c50:	08000c6b 	.word	0x08000c6b
 8000c54:	08000c71 	.word	0x08000c71
 8000c58:	08000c77 	.word	0x08000c77
 8000c5c:	08000c7d 	.word	0x08000c7d
 8000c60:	08000c81 	.word	0x08000c81
		case PORT_A:
			_HAL_PORT = GPIOA;
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <_HAL_PORT_DECODE+0x68>)
 8000c66:	60fb      	str	r3, [r7, #12]
		break;
 8000c68:	e010      	b.n	8000c8c <_HAL_PORT_DECODE+0x58>
		case PORT_B:
			_HAL_PORT = GPIOB;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <_HAL_PORT_DECODE+0x6c>)
 8000c6c:	60fb      	str	r3, [r7, #12]
		break;
 8000c6e:	e00d      	b.n	8000c8c <_HAL_PORT_DECODE+0x58>
		case PORT_C:
			_HAL_PORT = GPIOC;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <_HAL_PORT_DECODE+0x70>)
 8000c72:	60fb      	str	r3, [r7, #12]
		break;
 8000c74:	e00a      	b.n	8000c8c <_HAL_PORT_DECODE+0x58>
		case PORT_D:
			_HAL_PORT = GPIOD;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <_HAL_PORT_DECODE+0x74>)
 8000c78:	60fb      	str	r3, [r7, #12]
		break;
 8000c7a:	e007      	b.n	8000c8c <_HAL_PORT_DECODE+0x58>
		case PORT_E:
			return GPIOE;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <_HAL_PORT_DECODE+0x78>)
 8000c7e:	e006      	b.n	8000c8e <_HAL_PORT_DECODE+0x5a>
		break;
		case PORT_F:
			_HAL_PORT = GPIOF;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <_HAL_PORT_DECODE+0x7c>)
 8000c82:	60fb      	str	r3, [r7, #12]
		break;
 8000c84:	e002      	b.n	8000c8c <_HAL_PORT_DECODE+0x58>
		default:
			_HAL_PORT = GPIOG;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <_HAL_PORT_DECODE+0x80>)
 8000c88:	60fb      	str	r3, [r7, #12]
		break;
 8000c8a:	bf00      	nop
	}
	return _HAL_PORT;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	40021400 	.word	0x40021400
 8000cb4:	40021800 	.word	0x40021800

08000cb8 <GPIO_set_config>:
 * @brief	Configurar GPIO para comunicación con DHT22
 * @param	PORT_A a PORTG
 * @param	Pin, en caso de STM32 va de GPIO_PIN_0 a GPIO_PIN_15
 * @note	GPIO modo salida, open-drain con interrupciones por flanco descendente
 */
void GPIO_set_config(uint8_t GPIO_port, uint16_t GPIO_num){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b090      	sub	sp, #64	; 0x40
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	80bb      	strh	r3, [r7, #4]
	if(is_pin(GPIO_num)){
 8000cc8:	88bb      	ldrh	r3, [r7, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f915 	bl	8000efa <is_pin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80e0 	beq.w	8000e98 <GPIO_set_config+0x1e0>
		//Preparar configuración PIN
		GPIO_InitTypeDef PIN_DHT22_config;

		if(PORT_A == GPIO_port){__HAL_RCC_GPIOA_CLK_ENABLE();}
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d10d      	bne.n	8000cfa <GPIO_set_config+0x42>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
 8000ce2:	4b6f      	ldr	r3, [pc, #444]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a6e      	ldr	r2, [pc, #440]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b6c      	ldr	r3, [pc, #432]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
		if(PORT_B == GPIO_port){__HAL_RCC_GPIOB_CLK_ENABLE();}
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d10d      	bne.n	8000d1c <GPIO_set_config+0x64>
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	4b66      	ldr	r3, [pc, #408]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	4a65      	ldr	r2, [pc, #404]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d10:	4b63      	ldr	r3, [pc, #396]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
		if(PORT_C == GPIO_port){__HAL_RCC_GPIOC_CLK_ENABLE();}
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d10d      	bne.n	8000d3e <GPIO_set_config+0x86>
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a5d      	ldr	r2, [pc, #372]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	61bb      	str	r3, [r7, #24]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
		if(PORT_D == GPIO_port){__HAL_RCC_GPIOD_CLK_ENABLE();}
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d10d      	bne.n	8000d60 <GPIO_set_config+0xa8>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	4b55      	ldr	r3, [pc, #340]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a54      	ldr	r2, [pc, #336]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697b      	ldr	r3, [r7, #20]
		if(PORT_E == GPIO_port){__HAL_RCC_GPIOE_CLK_ENABLE();}
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d10d      	bne.n	8000d82 <GPIO_set_config+0xca>
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a4c      	ldr	r2, [pc, #304]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
		if(PORT_F == GPIO_port){__HAL_RCC_GPIOF_CLK_ENABLE();}
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b06      	cmp	r3, #6
 8000d86:	d10d      	bne.n	8000da4 <GPIO_set_config+0xec>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d92:	f043 0320 	orr.w	r3, r3, #32
 8000d96:	6313      	str	r3, [r2, #48]	; 0x30
 8000d98:	4b41      	ldr	r3, [pc, #260]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	f003 0320 	and.w	r3, r3, #32
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
		if(PORT_G == GPIO_port){__HAL_RCC_GPIOG_CLK_ENABLE();}
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b07      	cmp	r3, #7
 8000da8:	d10d      	bne.n	8000dc6 <GPIO_set_config+0x10e>
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b3c      	ldr	r3, [pc, #240]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a3b      	ldr	r2, [pc, #236]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <GPIO_set_config+0x1e8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]

		PIN_DHT22_config.Pin = GPIO_num;
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
		PIN_DHT22_config.Mode = MODE_OUTPUT | OUTPUT_OD | EXTI_IT | TRIGGER_FALLING;
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <GPIO_set_config+0x1ec>)
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
		PIN_DHT22_config.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PIN_DHT22_config.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30

		GPIO_TypeDef  * _HAL_PORT;
		_HAL_PORT=_HAL_PORT_DECODE(GPIO_port);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff2b 	bl	8000c34 <_HAL_PORT_DECODE>
 8000dde:	63b8      	str	r0, [r7, #56]	; 0x38

		//Cargar configuración PIN
		HAL_GPIO_Init(_HAL_PORT, &PIN_DHT22_config);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000de8:	f000 fb86 	bl	80014f8 <HAL_GPIO_Init>

		//Interrupción
		IRQn_Type IRQn;
		switch (GPIO_num){
 8000dec:	88bb      	ldrh	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d837      	bhi.n	8000e64 <GPIO_set_config+0x1ac>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <GPIO_set_config+0x144>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e3d 	.word	0x08000e3d
 8000e00:	08000e45 	.word	0x08000e45
 8000e04:	08000e65 	.word	0x08000e65
 8000e08:	08000e4d 	.word	0x08000e4d
 8000e0c:	08000e65 	.word	0x08000e65
 8000e10:	08000e65 	.word	0x08000e65
 8000e14:	08000e65 	.word	0x08000e65
 8000e18:	08000e55 	.word	0x08000e55
 8000e1c:	08000e65 	.word	0x08000e65
 8000e20:	08000e65 	.word	0x08000e65
 8000e24:	08000e65 	.word	0x08000e65
 8000e28:	08000e65 	.word	0x08000e65
 8000e2c:	08000e65 	.word	0x08000e65
 8000e30:	08000e65 	.word	0x08000e65
 8000e34:	08000e65 	.word	0x08000e65
 8000e38:	08000e5d 	.word	0x08000e5d
			case GPIO_PIN_0:
				IRQn = EXTI0_IRQn;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000e42:	e01b      	b.n	8000e7c <GPIO_set_config+0x1c4>
			case GPIO_PIN_1:
				IRQn = EXTI1_IRQn;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000e4a:	e017      	b.n	8000e7c <GPIO_set_config+0x1c4>
			case GPIO_PIN_2:
				IRQn = EXTI2_IRQn;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000e52:	e013      	b.n	8000e7c <GPIO_set_config+0x1c4>
			case GPIO_PIN_3:
				IRQn = EXTI3_IRQn;
 8000e54:	2309      	movs	r3, #9
 8000e56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000e5a:	e00f      	b.n	8000e7c <GPIO_set_config+0x1c4>
			case GPIO_PIN_4:
				IRQn = EXTI4_IRQn;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000e62:	e00b      	b.n	8000e7c <GPIO_set_config+0x1c4>
			default:
				if(GPIO_num<GPIO_PIN_10){
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6a:	d203      	bcs.n	8000e74 <GPIO_set_config+0x1bc>
					IRQn = EXTI9_5_IRQn;
 8000e6c:	2317      	movs	r3, #23
 8000e6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				} else {
					IRQn = EXTI15_10_IRQn;
				}
			break;
 8000e72:	e002      	b.n	8000e7a <GPIO_set_config+0x1c2>
					IRQn = EXTI15_10_IRQn;
 8000e74:	2328      	movs	r3, #40	; 0x28
 8000e76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			break;
 8000e7a:	bf00      	nop
		}

		HAL_NVIC_SetPriority(IRQn,0,0);
 8000e7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fb0e 	bl	80014a6 <HAL_NVIC_SetPriority>
		NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff feb2 	bl	8000bf8 <__NVIC_EnableIRQ>

		Timer_Init();
 8000e94:	f000 f90c 	bl	80010b0 <Timer_Init>
	}
}
 8000e98:	bf00      	nop
 8000e9a:	3740      	adds	r7, #64	; 0x40
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	00210011 	.word	0x00210011

08000ea8 <GPIO_write>:
 * @param	Port. Valores válidos PORT_A a PORT_G
 * @param	Número de PIN
 * @param	Estado a setear. 0=>Bajo. 1=>Open.
 * @note	GPIO en modo open-drain
 */
void GPIO_write(uint8_t _GPIO_port, uint16_t GPIO_num, bool_t GPIO_state){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	71bb      	strb	r3, [r7, #6]

	if(is_pin(GPIO_num)){
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f81c 	bl	8000efa <is_pin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d014      	beq.n	8000ef2 <GPIO_write+0x4a>

		GPIO_TypeDef * GPIO_port;
		GPIO_port = _HAL_PORT_DECODE(_GPIO_port);
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff feb2 	bl	8000c34 <_HAL_PORT_DECODE>
 8000ed0:	60f8      	str	r0, [r7, #12]

		if(GPIO_state) {
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <GPIO_write+0x3e>
			HAL_GPIO_WritePin(GPIO_port, GPIO_num, GPIO_PIN_SET);
 8000ed8:	88bb      	ldrh	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	4619      	mov	r1, r3
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f000 fcb6 	bl	8001850 <HAL_GPIO_WritePin>
		}

	} else {
		/*Error en el número de PIN*/
	}
}
 8000ee4:	e005      	b.n	8000ef2 <GPIO_write+0x4a>
			HAL_GPIO_WritePin(GPIO_port, GPIO_num, GPIO_PIN_RESET);
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4619      	mov	r1, r3
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 fcaf 	bl	8001850 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <is_pin>:
/*
 * @brief	Verifica si el valor del pin es válido
 * @param	Número de PIN
 * @return	1 si es válido, sino devuelve 0
 */
bool_t is_pin(uint16_t GPIO_num){
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	80fb      	strh	r3, [r7, #6]
	if(IS_GPIO_PIN(GPIO_num) != 1){
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <is_pin+0x1e>
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	0c1b      	lsrs	r3, r3, #16
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <is_pin+0x1e>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <is_pin+0x20>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d001      	beq.n	8000f22 <is_pin+0x28>
		return 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <is_pin+0x2a>
	}
	return 1;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <EXTI0_IRQHandler>:
/*-------------------------------------------- Interrupciones --------------------------------------------*/

/*
 * @brief	Manejador de interrupción EXIT0
 */
void EXTI0_IRQHandler(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 fca5 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <EXTI1_IRQHandler>:

/*
 * @brief	Manejador de interrupción EXIT1
 */
void EXTI1_IRQHandler(void){
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f42:	2002      	movs	r0, #2
 8000f44:	f000 fc9e 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <EXTI2_IRQHandler>:

/*
 * @brief	Manejador de interrupción EXIT2
 */
void EXTI2_IRQHandler(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f000 fc97 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <EXTI3_IRQHandler>:

/*
 * @brief	Manejador de interrupción EXIT3
 */
void EXTI3_IRQHandler(void){
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f5e:	2008      	movs	r0, #8
 8000f60:	f000 fc90 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <EXTI4_IRQHandler>:

/*
 * @brief	Manejador de interrupción EXIT4
 */
void EXTI4_IRQHandler(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f000 fc89 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <EXTI15_10_IRQHandler>:
}

/*
 * @brief	Manejador de interrupción EXIT15_10
 */
void EXTI15_10_IRQHandler (void){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	if(_DHT22.Pin<=GPIO_PIN_15 && _DHT22.Pin>=GPIO_PIN_10){
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <EXTI15_10_IRQHandler+0x34>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f84:	d80a      	bhi.n	8000f9c <EXTI15_10_IRQHandler+0x24>
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <EXTI15_10_IRQHandler+0x34>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8e:	d305      	bcc.n	8000f9c <EXTI15_10_IRQHandler+0x24>
		HAL_GPIO_EXTI_IRQHandler(_DHT22.Pin);
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <EXTI15_10_IRQHandler+0x34>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fc75 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
 8000f9a:	e004      	b.n	8000fa6 <EXTI15_10_IRQHandler+0x2e>
	} else {
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fa0:	f000 fc70 	bl	8001884 <HAL_GPIO_EXTI_IRQHandler>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000084 	.word	0x20000084

08000fb0 <HAL_GPIO_EXTI_Callback>:

/*
 * @brief	Control de interrupción por PIN
 * @param	Número de PIN
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==_DHT22.Pin){
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	88fa      	ldrh	r2, [r7, #6]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d15b      	bne.n	800107c <HAL_GPIO_EXTI_Callback+0xcc>
		uint32_t new_bit = __HAL_TIM_GET_COUNTER(&hTim2);
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	60fb      	str	r3, [r7, #12]
		_DHT22.status = DHT_READING;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000fce:	2203      	movs	r2, #3
 8000fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		/*Define si el pulso corresponde a un 0 o 1*/
		if(new_bit>T_corte){new_bit=1;}else{new_bit=0;}
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b5a      	cmp	r3, #90	; 0x5a
 8000fd8:	d902      	bls.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x30>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	e001      	b.n	8000fe4 <HAL_GPIO_EXTI_Callback+0x34>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]

		if(T_Array_counter>=_inicio_bit_0 && T_Array_counter<32+_inicio_bit_0){
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d911      	bls.n	8001010 <HAL_GPIO_EXTI_Callback+0x60>
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b21      	cmp	r3, #33	; 0x21
 8000ff2:	d80d      	bhi.n	8001010 <HAL_GPIO_EXTI_Callback+0x60>
			new_bit = new_bit<<(31+_inicio_bit_0-T_Array_counter);
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f1c3 0321 	rsb	r3, r3, #33	; 0x21
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	60fb      	str	r3, [r7, #12]
			_DHT22.data.crude |= new_bit;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001006:	69da      	ldr	r2, [r3, #28]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <HAL_GPIO_EXTI_Callback+0xd8>)
 800100e:	61d3      	str	r3, [r2, #28]
		}
		if(T_Array_counter>=32+_inicio_bit_0 && T_Array_counter<40+_inicio_bit_0){
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b21      	cmp	r3, #33	; 0x21
 8001016:	d920      	bls.n	800105a <HAL_GPIO_EXTI_Callback+0xaa>
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b29      	cmp	r3, #41	; 0x29
 800101e:	d81c      	bhi.n	800105a <HAL_GPIO_EXTI_Callback+0xaa>
			new_bit = new_bit<<(39+_inicio_bit_0-T_Array_counter);
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	f1c3 0329 	rsb	r3, r3, #41	; 0x29
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	60fb      	str	r3, [r7, #12]
			_DHT22.data.validation |= new_bit;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001032:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
			if(T_Array_counter==39+_inicio_bit_0){	/*Se completó la lectura*/
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b29      	cmp	r3, #41	; 0x29
 800104a:	d106      	bne.n	800105a <HAL_GPIO_EXTI_Callback+0xaa>
				cont_timer=0;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_GPIO_EXTI_Callback+0xe4>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
				_DHT22.status = DHT_OK;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
		}
		T_Array_counter++;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3301      	adds	r3, #1
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001064:	701a      	strb	r2, [r3, #0]
		if(T_Array_counter> 39+_inicio_bit_0){
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b29      	cmp	r3, #41	; 0x29
 800106c:	d902      	bls.n	8001074 <HAL_GPIO_EXTI_Callback+0xc4>
			T_Array_counter=0;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
		}

		__HAL_TIM_SET_COUNTER(&hTim2,0);
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	20000084 	.word	0x20000084
 800108c:	200000bc 	.word	0x200000bc
 8001090:	20000104 	.word	0x20000104
 8001094:	20000108 	.word	0x20000108

08001098 <port_delay_ms>:

/*
 * @brief	CGenerar delay bloqueante en milisegundos
 * @param	Tiempo en milisegundos a esperar
 */
void port_delay_ms(uint32_t delay){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f91f 	bl	80012e4 <HAL_Delay>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <Timer_Init>:

/*
 * @brief	Inicializa el Timer 2
 * @note	Cuenta cada 1us e interrupción cada 1ms
 */
void Timer_Init(void){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <Timer_Init+0xb4>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a29      	ldr	r2, [pc, #164]	; (8001164 <Timer_Init+0xb4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <Timer_Init+0xb4>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
    hTim2.Instance = TIM2;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <Timer_Init+0xb8>)
 80010d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d8:	601a      	str	r2, [r3, #0]
    hTim2.Init.Prescaler = 80-1;							/*Valor del contador del timer en us*/
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <Timer_Init+0xb8>)
 80010dc:	224f      	movs	r2, #79	; 0x4f
 80010de:	605a      	str	r2, [r3, #4]
    hTim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <Timer_Init+0xb8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
    hTim2.Init.Period = 1000-1;								/*Interrupción cada 1ms*/
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <Timer_Init+0xb8>)
 80010e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ec:	60da      	str	r2, [r3, #12]
    hTim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <Timer_Init+0xb8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
    hTim2.Init.RepetitionCounter = 0;
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <Timer_Init+0xb8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
    hTim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <Timer_Init+0xb8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&hTim2);
 8001100:	4819      	ldr	r0, [pc, #100]	; (8001168 <Timer_Init+0xb8>)
 8001102:	f001 f919 	bl	8002338 <HAL_TIM_Base_Init>

    //Selección del reloj interno
    TIM_ClockConfigTypeDef TimClock = {0};
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
    TimClock.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	613b      	str	r3, [r7, #16]
	HAL_TIM_ConfigClockSource(&hTim2, &TimClock);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <Timer_Init+0xb8>)
 8001122:	f001 fadb 	bl	80026dc <HAL_TIM_ConfigClockSource>

	//Configurar reloj como master
	TIM_MasterConfigTypeDef TimMaster = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
	TimMaster.MasterSlaveMode = TIM_SLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
	TimMaster.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
	HAL_TIMEx_MasterConfigSynchronization(&hTim2, &TimMaster);
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	4619      	mov	r1, r3
 800113e:	480a      	ldr	r0, [pc, #40]	; (8001168 <Timer_Init+0xb8>)
 8001140:	f001 fcf6 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>

	//Habilitar interrupción del timer
	HAL_NVIC_SetPriority(TIM2_IRQn,5,5);
 8001144:	2205      	movs	r2, #5
 8001146:	2105      	movs	r1, #5
 8001148:	201c      	movs	r0, #28
 800114a:	f000 f9ac 	bl	80014a6 <HAL_NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800114e:	201c      	movs	r0, #28
 8001150:	f7ff fd52 	bl	8000bf8 <__NVIC_EnableIRQ>

	HAL_TIM_Base_Start_IT(&hTim2);
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <Timer_Init+0xb8>)
 8001156:	f001 f949 	bl	80023ec <HAL_TIM_Base_Start_IT>
}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	200000bc 	.word	0x200000bc

0800116c <TIM2_IRQHandler>:


/*
 * @brief	Manejador de interrupción por Timer2
 */
void TIM2_IRQHandler (void){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&hTim2);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM2_IRQHandler+0x10>)
 8001172:	f001 f9ab 	bl	80024cc <HAL_TIM_IRQHandler>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200000bc 	.word	0x200000bc

08001180 <HAL_TIM_PeriodElapsedCallback>:
/*
 * @brief	Control de interrupción por Timer2
 * @param	Manejador del Timer2
 * @Note	Ocurre una interrupcion cada 1ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	cont_timer++;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001190:	6013      	str	r3, [r2, #0]
	if(cont_timer>9000){
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f242 3228 	movw	r2, #9000	; 0x2328
 800119a:	4293      	cmp	r3, r2
 800119c:	d902      	bls.n	80011a4 <HAL_TIM_PeriodElapsedCallback+0x24>
		cont_timer=0;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
	}
	if(cont_timer>2501){
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f640 12c5 	movw	r2, #2501	; 0x9c5
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d90b      	bls.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x48>
		T_Array_counter=0;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
		GPIO_write(_DHT22.Port, _DHT22.Pin, 1);
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011bc:	8811      	ldrh	r1, [r2, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe71 	bl	8000ea8 <GPIO_write>
		_DHT22.data.crude=0;
		_DHT22.data.validation=0;
		GPIO_write(_DHT22.Port, _DHT22.Pin, 0);
		T_Array_counter=0;
	}
}
 80011c6:	e017      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x78>
	}else if(cont_timer>=2500){
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d911      	bls.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x78>
		_DHT22.data.crude=0;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
		_DHT22.data.validation=0;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
		GPIO_write(_DHT22.Port, _DHT22.Pin, 0);
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011e8:	8811      	ldrh	r1, [r2, #0]
 80011ea:	2200      	movs	r2, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fe5b 	bl	8000ea8 <GPIO_write>
		T_Array_counter=0;
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000108 	.word	0x20000108
 8001204:	20000104 	.word	0x20000104
 8001208:	20000084 	.word	0x20000084

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_Init+0x34>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_Init+0x34>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x34>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x34>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f931 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f000 fb90 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f93b 	bl	80014de <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f000 f911 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000000c 	.word	0x2000000c
 800129c:	20000014 	.word	0x20000014
 80012a0:	20000010 	.word	0x20000010

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000014 	.word	0x20000014
 80012c8:	2000010c 	.word	0x2000010c

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2000010c 	.word	0x2000010c

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000014 	.word	0x20000014

0800132c <__NVIC_SetPriorityGrouping>:
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff47 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff5c 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffb0 	bl	800144c <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e177      	b.n	8001804 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 8166 	bne.w	80017fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	2b02      	cmp	r3, #2
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d017      	beq.n	80015e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d123      	bne.n	800163c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80c0 	beq.w	80017fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b66      	ldr	r3, [pc, #408]	; (800181c <HAL_GPIO_Init+0x324>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a65      	ldr	r2, [pc, #404]	; (800181c <HAL_GPIO_Init+0x324>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_GPIO_Init+0x324>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a61      	ldr	r2, [pc, #388]	; (8001820 <HAL_GPIO_Init+0x328>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a58      	ldr	r2, [pc, #352]	; (8001824 <HAL_GPIO_Init+0x32c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d037      	beq.n	8001736 <HAL_GPIO_Init+0x23e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a57      	ldr	r2, [pc, #348]	; (8001828 <HAL_GPIO_Init+0x330>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d031      	beq.n	8001732 <HAL_GPIO_Init+0x23a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a56      	ldr	r2, [pc, #344]	; (800182c <HAL_GPIO_Init+0x334>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d02b      	beq.n	800172e <HAL_GPIO_Init+0x236>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a55      	ldr	r2, [pc, #340]	; (8001830 <HAL_GPIO_Init+0x338>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d025      	beq.n	800172a <HAL_GPIO_Init+0x232>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a54      	ldr	r2, [pc, #336]	; (8001834 <HAL_GPIO_Init+0x33c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01f      	beq.n	8001726 <HAL_GPIO_Init+0x22e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a53      	ldr	r2, [pc, #332]	; (8001838 <HAL_GPIO_Init+0x340>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d019      	beq.n	8001722 <HAL_GPIO_Init+0x22a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a52      	ldr	r2, [pc, #328]	; (800183c <HAL_GPIO_Init+0x344>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0x226>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_GPIO_Init+0x348>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_Init+0x222>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a50      	ldr	r2, [pc, #320]	; (8001844 <HAL_GPIO_Init+0x34c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x21e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4f      	ldr	r2, [pc, #316]	; (8001848 <HAL_GPIO_Init+0x350>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_GPIO_Init+0x21a>
 800170e:	2309      	movs	r3, #9
 8001710:	e012      	b.n	8001738 <HAL_GPIO_Init+0x240>
 8001712:	230a      	movs	r3, #10
 8001714:	e010      	b.n	8001738 <HAL_GPIO_Init+0x240>
 8001716:	2308      	movs	r3, #8
 8001718:	e00e      	b.n	8001738 <HAL_GPIO_Init+0x240>
 800171a:	2307      	movs	r3, #7
 800171c:	e00c      	b.n	8001738 <HAL_GPIO_Init+0x240>
 800171e:	2306      	movs	r3, #6
 8001720:	e00a      	b.n	8001738 <HAL_GPIO_Init+0x240>
 8001722:	2305      	movs	r3, #5
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x240>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x240>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x240>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x240>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x240>
 8001736:	2300      	movs	r3, #0
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	4935      	ldr	r1, [pc, #212]	; (8001820 <HAL_GPIO_Init+0x328>)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_GPIO_Init+0x354>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800177a:	4a34      	ldr	r2, [pc, #208]	; (800184c <HAL_GPIO_Init+0x354>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_GPIO_Init+0x354>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a4:	4a29      	ldr	r2, [pc, #164]	; (800184c <HAL_GPIO_Init+0x354>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_GPIO_Init+0x354>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ce:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_GPIO_Init+0x354>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_GPIO_Init+0x354>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_GPIO_Init+0x354>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3301      	adds	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	f67f ae84 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40013800 	.word	0x40013800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40021000 	.word	0x40021000
 8001838:	40021400 	.word	0x40021400
 800183c:	40021800 	.word	0x40021800
 8001840:	40021c00 	.word	0x40021c00
 8001844:	40022000 	.word	0x40022000
 8001848:	40022400 	.word	0x40022400
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb84 	bl	8000fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40013c00 	.word	0x40013c00

080018b4 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <HAL_UART_MspInit+0x9c>)
 80018fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_UART_MspInit+0x9c>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800191a:	2301      	movs	r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001922:	2307      	movs	r3, #7
 8001924:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <HAL_UART_MspInit+0xa0>)
 800192e:	f7ff fde3 	bl	80014f8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001938:	2307      	movs	r3, #7
 800193a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4804      	ldr	r0, [pc, #16]	; (8001954 <HAL_UART_MspInit+0xa0>)
 8001944:	f7ff fdd8 	bl	80014f8 <HAL_GPIO_Init>
}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40020c00 	.word	0x40020c00

08001958 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_PWREx_EnableOverDrive+0x94>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001994:	f7ff fc9a 	bl	80012cc <HAL_GetTick>
 8001998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800199a:	e009      	b.n	80019b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800199c:	f7ff fc96 	bl	80012cc <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019aa:	d901      	bls.n	80019b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e01f      	b.n	80019f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_PWREx_EnableOverDrive+0x98>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d1ee      	bne.n	800199c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c4:	f7ff fc82 	bl	80012cc <HAL_GetTick>
 80019c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019ca:	e009      	b.n	80019e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019cc:	f7ff fc7e 	bl	80012cc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019da:	d901      	bls.n	80019e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e007      	b.n	80019f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_PWREx_EnableOverDrive+0x98>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019ec:	d1ee      	bne.n	80019cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	420e0040 	.word	0x420e0040
 8001a00:	40007000 	.word	0x40007000
 8001a04:	420e0044 	.word	0x420e0044

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e267      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d075      	beq.n	8001b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d00c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b85      	ldr	r3, [pc, #532]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3e:	4b82      	ldr	r3, [pc, #520]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x108>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d157      	bne.n	8001b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e242      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x74>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6c      	ldr	r2, [pc, #432]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fc04 	bl	80012cc <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fc00 	bl	80012cc <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e207      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xc0>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fbf0 	bl	80012cc <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff fbec 	bl	80012cc <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1f3      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0xe8>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1c7      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fba5 	bl	80012cc <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff fba1 	bl	80012cc <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1a8      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fb84 	bl	80012cc <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fb80 	bl	80012cc <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e187      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff fb64 	bl	80012cc <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fb60 	bl	80012cc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e167      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x200>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb4d 	bl	80012cc <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff fb49 	bl	80012cc <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e150      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b88      	ldr	r3, [pc, #544]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b81      	ldr	r3, [pc, #516]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7d      	ldr	r3, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a7c      	ldr	r2, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b77      	ldr	r3, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a73      	ldr	r2, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fb09 	bl	80012cc <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff fb05 	bl	80012cc <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e10c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x474>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ea>
 8001ce4:	4b64      	ldr	r3, [pc, #400]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x30c>
 8001cfa:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a5e      	ldr	r2, [pc, #376]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b5c      	ldr	r3, [pc, #368]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a5b      	ldr	r2, [pc, #364]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001d14:	4b58      	ldr	r3, [pc, #352]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff faca 	bl	80012cc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fac6 	bl	80012cc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0cb      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff fab4 	bl	80012cc <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff fab0 	bl	80012cc <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0b5      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a38      	ldr	r2, [pc, #224]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80a1 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d05c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d141      	bne.n	8001e3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa84 	bl	80012cc <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff fa80 	bl	80012cc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e087      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	491b      	ldr	r1, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff fa59 	bl	80012cc <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff fa55 	bl	80012cc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e05c      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x416>
 8001e3c:	e054      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fa42 	bl	80012cc <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff fa3e 	bl	80012cc <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e045      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_OscConfig+0x470>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x444>
 8001e6a:	e03d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e038      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_OscConfig+0x4ec>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d028      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d121      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11a      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0cc      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d90c      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b8      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494d      	ldr	r1, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d044      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e067      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4934      	ldr	r1, [pc, #208]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7ff f970 	bl	80012cc <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7ff f96c 	bl	80012cc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e04f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d20c      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e032      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f821 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002082:	4602      	mov	r2, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	490a      	ldr	r1, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	5ccb      	ldrb	r3, [r1, r3]
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f8d0 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023c00 	.word	0x40023c00
 80020b4:	40023800 	.word	0x40023800
 80020b8:	0800373c 	.word	0x0800373c
 80020bc:	2000000c 	.word	0x2000000c
 80020c0:	20000010 	.word	0x20000010

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c8:	b094      	sub	sp, #80	; 0x50
 80020ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
 80020d0:	2300      	movs	r3, #0
 80020d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d4:	2300      	movs	r3, #0
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020dc:	4b79      	ldr	r3, [pc, #484]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d00d      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x40>
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	f200 80e1 	bhi.w	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x34>
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x3a>
 80020f6:	e0db      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020fc:	e0db      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020fe:	4b73      	ldr	r3, [pc, #460]	; (80022cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002100:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002102:	e0d8      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002104:	4b6f      	ldr	r3, [pc, #444]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800210e:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d063      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	2200      	movs	r2, #0
 8002122:	63bb      	str	r3, [r7, #56]	; 0x38
 8002124:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
 800212e:	2300      	movs	r3, #0
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
 8002132:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002136:	4622      	mov	r2, r4
 8002138:	462b      	mov	r3, r5
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002148:	0150      	lsls	r0, r2, #5
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4621      	mov	r1, r4
 8002150:	1a51      	subs	r1, r2, r1
 8002152:	6139      	str	r1, [r7, #16]
 8002154:	4629      	mov	r1, r5
 8002156:	eb63 0301 	sbc.w	r3, r3, r1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002168:	4659      	mov	r1, fp
 800216a:	018b      	lsls	r3, r1, #6
 800216c:	4651      	mov	r1, sl
 800216e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002172:	4651      	mov	r1, sl
 8002174:	018a      	lsls	r2, r1, #6
 8002176:	4651      	mov	r1, sl
 8002178:	ebb2 0801 	subs.w	r8, r2, r1
 800217c:	4659      	mov	r1, fp
 800217e:	eb63 0901 	sbc.w	r9, r3, r1
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	4690      	mov	r8, r2
 8002198:	4699      	mov	r9, r3
 800219a:	4623      	mov	r3, r4
 800219c:	eb18 0303 	adds.w	r3, r8, r3
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	462b      	mov	r3, r5
 80021a4:	eb49 0303 	adc.w	r3, r9, r3
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021b6:	4629      	mov	r1, r5
 80021b8:	024b      	lsls	r3, r1, #9
 80021ba:	4621      	mov	r1, r4
 80021bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c0:	4621      	mov	r1, r4
 80021c2:	024a      	lsls	r2, r1, #9
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ca:	2200      	movs	r2, #0
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021d4:	f7fe f80a 	bl	80001ec <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4613      	mov	r3, r2
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e0:	e058      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	2200      	movs	r2, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	4611      	mov	r1, r2
 80021ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
 80021f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0159      	lsls	r1, r3, #5
 800220a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800220e:	0150      	lsls	r0, r2, #5
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4641      	mov	r1, r8
 8002216:	ebb2 0a01 	subs.w	sl, r2, r1
 800221a:	4649      	mov	r1, r9
 800221c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	f04f 0300 	mov.w	r3, #0
 8002228:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800222c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002230:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002234:	ebb2 040a 	subs.w	r4, r2, sl
 8002238:	eb63 050b 	sbc.w	r5, r3, fp
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	00eb      	lsls	r3, r5, #3
 8002246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800224a:	00e2      	lsls	r2, r4, #3
 800224c:	4614      	mov	r4, r2
 800224e:	461d      	mov	r5, r3
 8002250:	4643      	mov	r3, r8
 8002252:	18e3      	adds	r3, r4, r3
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	464b      	mov	r3, r9
 8002258:	eb45 0303 	adc.w	r3, r5, r3
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800226a:	4629      	mov	r1, r5
 800226c:	028b      	lsls	r3, r1, #10
 800226e:	4621      	mov	r1, r4
 8002270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002274:	4621      	mov	r1, r4
 8002276:	028a      	lsls	r2, r1, #10
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	2200      	movs	r2, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	61fa      	str	r2, [r7, #28]
 8002284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002288:	f7fd ffb0 	bl	80001ec <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80022b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3750      	adds	r7, #80	; 0x50
 80022bc:	46bd      	mov	sp, r7
 80022be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a9b      	lsrs	r3, r3, #10
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4903      	ldr	r1, [pc, #12]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	0800374c 	.word	0x0800374c

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002314:	f7ff ffdc 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0b5b      	lsrs	r3, r3, #13
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4903      	ldr	r1, [pc, #12]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	0800374c 	.word	0x0800374c

08002338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f839 	bl	80023d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 faa0 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d001      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e04e      	b.n	80024a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d022      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242e:	d01d      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d018      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_TIM_Base_Start_IT+0xd0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x80>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a18      	ldr	r2, [pc, #96]	; (80024c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d111      	bne.n	8002490 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b06      	cmp	r3, #6
 800247c:	d010      	beq.n	80024a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0201 	orr.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248e:	e007      	b.n	80024a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40010000 	.word	0x40010000
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40000800 	.word	0x40000800
 80024bc:	40000c00 	.word	0x40000c00
 80024c0:	40010400 	.word	0x40010400
 80024c4:	40014000 	.word	0x40014000
 80024c8:	40001800 	.word	0x40001800

080024cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d122      	bne.n	8002528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d11b      	bne.n	8002528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0202 	mvn.w	r2, #2
 80024f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9b5 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f9a7 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f9b8 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b04      	cmp	r3, #4
 8002534:	d122      	bne.n	800257c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d11b      	bne.n	800257c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0204 	mvn.w	r2, #4
 800254c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2202      	movs	r2, #2
 8002552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f98b 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f97d 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f98e 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b08      	cmp	r3, #8
 8002588:	d122      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b08      	cmp	r3, #8
 8002596:	d11b      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0208 	mvn.w	r2, #8
 80025a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2204      	movs	r2, #4
 80025a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f961 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f953 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f964 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0210 	mvn.w	r2, #16
 80025f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2208      	movs	r2, #8
 80025fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f937 	bl	800287e <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f929 	bl	800286a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f93a 	bl	8002892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10e      	bne.n	8002650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0201 	mvn.w	r2, #1
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fd98 	bl	8001180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d10e      	bne.n	800267c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002668:	2b80      	cmp	r3, #128	; 0x80
 800266a:	d107      	bne.n	800267c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fae0 	bl	8002c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d10e      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d107      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8ff 	bl	80028a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0320 	and.w	r3, r3, #32
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d107      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0220 	mvn.w	r2, #32
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 faaa 	bl	8002c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x1c>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0b4      	b.n	8002862 <HAL_TIM_ConfigClockSource+0x186>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002730:	d03e      	beq.n	80027b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002736:	f200 8087 	bhi.w	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 800273a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273e:	f000 8086 	beq.w	800284e <HAL_TIM_ConfigClockSource+0x172>
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d87f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b70      	cmp	r3, #112	; 0x70
 800274a:	d01a      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xa6>
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d87b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d050      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d877      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b50      	cmp	r3, #80	; 0x50
 800275a:	d03c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xfa>
 800275c:	2b50      	cmp	r3, #80	; 0x50
 800275e:	d873      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b40      	cmp	r3, #64	; 0x40
 8002762:	d058      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x13a>
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d86f      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b30      	cmp	r3, #48	; 0x30
 800276a:	d064      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b30      	cmp	r3, #48	; 0x30
 800276e:	d86b      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b20      	cmp	r3, #32
 8002772:	d060      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002774:	2b20      	cmp	r3, #32
 8002776:	d867      	bhi.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05c      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 800277c:	2b10      	cmp	r3, #16
 800277e:	d05a      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	e062      	b.n	8002848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f000 f9ad 	bl	8002af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	609a      	str	r2, [r3, #8]
      break;
 80027ae:	e04f      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6899      	ldr	r1, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f000 f996 	bl	8002af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d2:	609a      	str	r2, [r3, #8]
      break;
 80027d4:	e03c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f000 f90a 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2150      	movs	r1, #80	; 0x50
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f963 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 80027f4:	e02c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6859      	ldr	r1, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	461a      	mov	r2, r3
 8002804:	f000 f929 	bl	8002a5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2160      	movs	r1, #96	; 0x60
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f953 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 8002814:	e01c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	f000 f8ea 	bl	80029fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f943 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 8002834:	e00c      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f000 f93a 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 8002846:	e003      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e000      	b.n	8002850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800284e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a40      	ldr	r2, [pc, #256]	; (80029d0 <TIM_Base_SetConfig+0x114>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d013      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d00f      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <TIM_Base_SetConfig+0x118>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00b      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <TIM_Base_SetConfig+0x11c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <TIM_Base_SetConfig+0x120>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3a      	ldr	r2, [pc, #232]	; (80029e0 <TIM_Base_SetConfig+0x124>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d108      	bne.n	800290e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2f      	ldr	r2, [pc, #188]	; (80029d0 <TIM_Base_SetConfig+0x114>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d02b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d027      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2c      	ldr	r2, [pc, #176]	; (80029d4 <TIM_Base_SetConfig+0x118>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d023      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <TIM_Base_SetConfig+0x11c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <TIM_Base_SetConfig+0x120>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <TIM_Base_SetConfig+0x124>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d017      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a28      	ldr	r2, [pc, #160]	; (80029e4 <TIM_Base_SetConfig+0x128>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a27      	ldr	r2, [pc, #156]	; (80029e8 <TIM_Base_SetConfig+0x12c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00f      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <TIM_Base_SetConfig+0x130>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <TIM_Base_SetConfig+0x134>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a24      	ldr	r2, [pc, #144]	; (80029f4 <TIM_Base_SetConfig+0x138>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <TIM_Base_SetConfig+0x13c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <TIM_Base_SetConfig+0x114>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0xf8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <TIM_Base_SetConfig+0x124>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d103      	bne.n	80029bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	615a      	str	r2, [r3, #20]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40010000 	.word	0x40010000
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40000c00 	.word	0x40000c00
 80029e0:	40010400 	.word	0x40010400
 80029e4:	40014000 	.word	0x40014000
 80029e8:	40014400 	.word	0x40014400
 80029ec:	40014800 	.word	0x40014800
 80029f0:	40001800 	.word	0x40001800
 80029f4:	40001c00 	.word	0x40001c00
 80029f8:	40002000 	.word	0x40002000

080029fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0201 	bic.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 030a 	bic.w	r3, r3, #10
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0210 	bic.w	r2, r3, #16
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f043 0307 	orr.w	r3, r3, #7
 8002adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	021a      	lsls	r2, r3, #8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	609a      	str	r2, [r3, #8]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e05a      	b.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d01d      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d018      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00e      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a17      	ldr	r2, [pc, #92]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d004      	beq.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10c      	bne.n	8002bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40010400 	.word	0x40010400
 8002c20:	40014000 	.word	0x40014000
 8002c24:	40001800 	.word	0x40001800

08002c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e03f      	b.n	8002ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe fe1c 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2224      	movs	r2, #36	; 0x24
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f929 	bl	8002eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08a      	sub	sp, #40	; 0x28
 8002cee:	af02      	add	r7, sp, #8
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d17c      	bne.n	8002e04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_UART_Transmit+0x2c>
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e075      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_UART_Transmit+0x3e>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e06e      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2221      	movs	r2, #33	; 0x21
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3e:	f7fe fac5 	bl	80012cc <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d58:	d108      	bne.n	8002d6c <HAL_UART_Transmit+0x82>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e003      	b.n	8002d74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d7c:	e02a      	b.n	8002dd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f840 	bl	8002e0e <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e036      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3302      	adds	r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	e007      	b.n	8002dc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1cf      	bne.n	8002d7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2200      	movs	r2, #0
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f810 	bl	8002e0e <UART_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e006      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e000      	b.n	8002e06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
  }
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b090      	sub	sp, #64	; 0x40
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1e:	e050      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e26:	d04c      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	f7fe fa4d 	bl	80012cc <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d241      	bcs.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	330c      	adds	r3, #12
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e5e:	637a      	str	r2, [r7, #52]	; 0x34
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3314      	adds	r3, #20
 8002e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	613b      	str	r3, [r7, #16]
   return(result);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3314      	adds	r3, #20
 8002e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e92:	623a      	str	r2, [r7, #32]
 8002e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e96:	69f9      	ldr	r1, [r7, #28]
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1e5      	bne.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e00f      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d09f      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3740      	adds	r7, #64	; 0x40
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef0:	b0c0      	sub	sp, #256	; 0x100
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	68d9      	ldr	r1, [r3, #12]
 8002f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	ea40 0301 	orr.w	r3, r0, r1
 8002f14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f44:	f021 010c 	bic.w	r1, r1, #12
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f52:	430b      	orrs	r3, r1
 8002f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	6999      	ldr	r1, [r3, #24]
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	ea40 0301 	orr.w	r3, r0, r1
 8002f72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <UART_SetConfig+0x2cc>)
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d005      	beq.n	8002f8c <UART_SetConfig+0xa0>
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b8d      	ldr	r3, [pc, #564]	; (80031bc <UART_SetConfig+0x2d0>)
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d104      	bne.n	8002f96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f8c:	f7ff f9c0 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8002f90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f94:	e003      	b.n	8002f9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f96:	f7ff f9a7 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8002f9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa8:	f040 810c 	bne.w	80031c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fbe:	4622      	mov	r2, r4
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fce:	4621      	mov	r1, r4
 8002fd0:	eb12 0801 	adds.w	r8, r2, r1
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	eb43 0901 	adc.w	r9, r3, r1
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fee:	4690      	mov	r8, r2
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	eb18 0303 	adds.w	r3, r8, r3
 8002ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ffc:	462b      	mov	r3, r5
 8002ffe:	eb49 0303 	adc.w	r3, r9, r3
 8003002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003012:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003016:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800301a:	460b      	mov	r3, r1
 800301c:	18db      	adds	r3, r3, r3
 800301e:	653b      	str	r3, [r7, #80]	; 0x50
 8003020:	4613      	mov	r3, r2
 8003022:	eb42 0303 	adc.w	r3, r2, r3
 8003026:	657b      	str	r3, [r7, #84]	; 0x54
 8003028:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800302c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003030:	f7fd f8dc 	bl	80001ec <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <UART_SetConfig+0x2d4>)
 800303a:	fba3 2302 	umull	r2, r3, r3, r2
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	011c      	lsls	r4, r3, #4
 8003042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003046:	2200      	movs	r2, #0
 8003048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800304c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003050:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003054:	4642      	mov	r2, r8
 8003056:	464b      	mov	r3, r9
 8003058:	1891      	adds	r1, r2, r2
 800305a:	64b9      	str	r1, [r7, #72]	; 0x48
 800305c:	415b      	adcs	r3, r3
 800305e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003060:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003064:	4641      	mov	r1, r8
 8003066:	eb12 0a01 	adds.w	sl, r2, r1
 800306a:	4649      	mov	r1, r9
 800306c:	eb43 0b01 	adc.w	fp, r3, r1
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800307c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003084:	4692      	mov	sl, r2
 8003086:	469b      	mov	fp, r3
 8003088:	4643      	mov	r3, r8
 800308a:	eb1a 0303 	adds.w	r3, sl, r3
 800308e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003092:	464b      	mov	r3, r9
 8003094:	eb4b 0303 	adc.w	r3, fp, r3
 8003098:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030b0:	460b      	mov	r3, r1
 80030b2:	18db      	adds	r3, r3, r3
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
 80030b6:	4613      	mov	r3, r2
 80030b8:	eb42 0303 	adc.w	r3, r2, r3
 80030bc:	647b      	str	r3, [r7, #68]	; 0x44
 80030be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030c6:	f7fd f891 	bl	80001ec <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <UART_SetConfig+0x2d4>)
 80030d2:	fba3 2301 	umull	r2, r3, r3, r1
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2264      	movs	r2, #100	; 0x64
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	1acb      	subs	r3, r1, r3
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030e6:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <UART_SetConfig+0x2d4>)
 80030e8:	fba3 2302 	umull	r2, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f4:	441c      	add	r4, r3
 80030f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003100:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003104:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003108:	4642      	mov	r2, r8
 800310a:	464b      	mov	r3, r9
 800310c:	1891      	adds	r1, r2, r2
 800310e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003110:	415b      	adcs	r3, r3
 8003112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003114:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003118:	4641      	mov	r1, r8
 800311a:	1851      	adds	r1, r2, r1
 800311c:	6339      	str	r1, [r7, #48]	; 0x30
 800311e:	4649      	mov	r1, r9
 8003120:	414b      	adcs	r3, r1
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003130:	4659      	mov	r1, fp
 8003132:	00cb      	lsls	r3, r1, #3
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313a:	4651      	mov	r1, sl
 800313c:	00ca      	lsls	r2, r1, #3
 800313e:	4610      	mov	r0, r2
 8003140:	4619      	mov	r1, r3
 8003142:	4603      	mov	r3, r0
 8003144:	4642      	mov	r2, r8
 8003146:	189b      	adds	r3, r3, r2
 8003148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800314c:	464b      	mov	r3, r9
 800314e:	460a      	mov	r2, r1
 8003150:	eb42 0303 	adc.w	r3, r2, r3
 8003154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003164:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800316c:	460b      	mov	r3, r1
 800316e:	18db      	adds	r3, r3, r3
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
 8003172:	4613      	mov	r3, r2
 8003174:	eb42 0303 	adc.w	r3, r2, r3
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800317a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800317e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003182:	f7fd f833 	bl	80001ec <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <UART_SetConfig+0x2d4>)
 800318c:	fba3 1302 	umull	r1, r3, r3, r2
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	2164      	movs	r1, #100	; 0x64
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	3332      	adds	r3, #50	; 0x32
 800319e:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <UART_SetConfig+0x2d4>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	f003 0207 	and.w	r2, r3, #7
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4422      	add	r2, r4
 80031b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031b4:	e105      	b.n	80033c2 <UART_SetConfig+0x4d6>
 80031b6:	bf00      	nop
 80031b8:	40011000 	.word	0x40011000
 80031bc:	40011400 	.word	0x40011400
 80031c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031d6:	4642      	mov	r2, r8
 80031d8:	464b      	mov	r3, r9
 80031da:	1891      	adds	r1, r2, r2
 80031dc:	6239      	str	r1, [r7, #32]
 80031de:	415b      	adcs	r3, r3
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e6:	4641      	mov	r1, r8
 80031e8:	1854      	adds	r4, r2, r1
 80031ea:	4649      	mov	r1, r9
 80031ec:	eb43 0501 	adc.w	r5, r3, r1
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	00eb      	lsls	r3, r5, #3
 80031fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fe:	00e2      	lsls	r2, r4, #3
 8003200:	4614      	mov	r4, r2
 8003202:	461d      	mov	r5, r3
 8003204:	4643      	mov	r3, r8
 8003206:	18e3      	adds	r3, r4, r3
 8003208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800320c:	464b      	mov	r3, r9
 800320e:	eb45 0303 	adc.w	r3, r5, r3
 8003212:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003222:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003232:	4629      	mov	r1, r5
 8003234:	008b      	lsls	r3, r1, #2
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800323c:	4621      	mov	r1, r4
 800323e:	008a      	lsls	r2, r1, #2
 8003240:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003244:	f7fc ffd2 	bl	80001ec <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <UART_SetConfig+0x4e4>)
 800324e:	fba3 2302 	umull	r2, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	011c      	lsls	r4, r3, #4
 8003256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325a:	2200      	movs	r2, #0
 800325c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003260:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003264:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003268:	4642      	mov	r2, r8
 800326a:	464b      	mov	r3, r9
 800326c:	1891      	adds	r1, r2, r2
 800326e:	61b9      	str	r1, [r7, #24]
 8003270:	415b      	adcs	r3, r3
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003278:	4641      	mov	r1, r8
 800327a:	1851      	adds	r1, r2, r1
 800327c:	6139      	str	r1, [r7, #16]
 800327e:	4649      	mov	r1, r9
 8003280:	414b      	adcs	r3, r1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003290:	4659      	mov	r1, fp
 8003292:	00cb      	lsls	r3, r1, #3
 8003294:	4651      	mov	r1, sl
 8003296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329a:	4651      	mov	r1, sl
 800329c:	00ca      	lsls	r2, r1, #3
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	4642      	mov	r2, r8
 80032a6:	189b      	adds	r3, r3, r2
 80032a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032ac:	464b      	mov	r3, r9
 80032ae:	460a      	mov	r2, r1
 80032b0:	eb42 0303 	adc.w	r3, r2, r3
 80032b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80032c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032d0:	4649      	mov	r1, r9
 80032d2:	008b      	lsls	r3, r1, #2
 80032d4:	4641      	mov	r1, r8
 80032d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032da:	4641      	mov	r1, r8
 80032dc:	008a      	lsls	r2, r1, #2
 80032de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032e2:	f7fc ff83 	bl	80001ec <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <UART_SetConfig+0x4e4>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a34      	ldr	r2, [pc, #208]	; (80033d0 <UART_SetConfig+0x4e4>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800330a:	441c      	add	r4, r3
 800330c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003310:	2200      	movs	r2, #0
 8003312:	673b      	str	r3, [r7, #112]	; 0x70
 8003314:	677a      	str	r2, [r7, #116]	; 0x74
 8003316:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800331a:	4642      	mov	r2, r8
 800331c:	464b      	mov	r3, r9
 800331e:	1891      	adds	r1, r2, r2
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	415b      	adcs	r3, r3
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800332a:	4641      	mov	r1, r8
 800332c:	1851      	adds	r1, r2, r1
 800332e:	6039      	str	r1, [r7, #0]
 8003330:	4649      	mov	r1, r9
 8003332:	414b      	adcs	r3, r1
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003342:	4659      	mov	r1, fp
 8003344:	00cb      	lsls	r3, r1, #3
 8003346:	4651      	mov	r1, sl
 8003348:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334c:	4651      	mov	r1, sl
 800334e:	00ca      	lsls	r2, r1, #3
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	4603      	mov	r3, r0
 8003356:	4642      	mov	r2, r8
 8003358:	189b      	adds	r3, r3, r2
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
 800335c:	464b      	mov	r3, r9
 800335e:	460a      	mov	r2, r1
 8003360:	eb42 0303 	adc.w	r3, r2, r3
 8003364:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	663b      	str	r3, [r7, #96]	; 0x60
 8003370:	667a      	str	r2, [r7, #100]	; 0x64
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800337e:	4649      	mov	r1, r9
 8003380:	008b      	lsls	r3, r1, #2
 8003382:	4641      	mov	r1, r8
 8003384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003388:	4641      	mov	r1, r8
 800338a:	008a      	lsls	r2, r1, #2
 800338c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003390:	f7fc ff2c 	bl	80001ec <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <UART_SetConfig+0x4e4>)
 800339a:	fba3 1302 	umull	r1, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2164      	movs	r1, #100	; 0x64
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	; 0x32
 80033ac:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <UART_SetConfig+0x4e4>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4422      	add	r2, r4
 80033c0:	609a      	str	r2, [r3, #8]
}
 80033c2:	bf00      	nop
 80033c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ce:	bf00      	nop
 80033d0:	51eb851f 	.word	0x51eb851f

080033d4 <main>:
static void SystemClock_Config(void);
static void Error_Handler(void);



int main(void) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  HAL_Init();
 80033d8:	f7fd ff18 	bl	800120c <HAL_Init>
  SystemClock_Config(); // Configure the system clock to 180 MHz
 80033dc:	f000 f826 	bl	800342c <SystemClock_Config>

  uartInit();
 80033e0:	f7fd f886 	bl	80004f0 <uartInit>

  DHT22_init(GPIO_PIN_4, PORT_E);
 80033e4:	2105      	movs	r1, #5
 80033e6:	2010      	movs	r0, #16
 80033e8:	f7fd fa76 	bl	80008d8 <DHT22_init>

  while (1) {

	  uartSendString((uint8_t *)"\r\nTemp: ");
 80033ec:	480c      	ldr	r0, [pc, #48]	; (8003420 <main+0x4c>)
 80033ee:	f7fd f94d 	bl	800068c <uartSendString>
	  uartSendString(DHT22_get_temp_string());
 80033f2:	f7fd fabd 	bl	8000970 <DHT22_get_temp_string>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f947 	bl	800068c <uartSendString>
	  uartSendString((uint8_t *)"\r\nHum: ");
 80033fe:	4809      	ldr	r0, [pc, #36]	; (8003424 <main+0x50>)
 8003400:	f7fd f944 	bl	800068c <uartSendString>
	  uartSendString(DHT22_get_hum_string());
 8003404:	f7fd fac8 	bl	8000998 <DHT22_get_hum_string>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f93e 	bl	800068c <uartSendString>
	  uartSendString((uint8_t *)"\r\n");
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <main+0x54>)
 8003412:	f7fd f93b 	bl	800068c <uartSendString>

	  delay_ms(2000);
 8003416:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800341a:	f7fd fbe1 	bl	8000be0 <delay_ms>
	  uartSendString((uint8_t *)"\r\nTemp: ");
 800341e:	e7e5      	b.n	80033ec <main+0x18>
 8003420:	0800371c 	.word	0x0800371c
 8003424:	08003728 	.word	0x08003728
 8003428:	08003730 	.word	0x08003730

0800342c <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b094      	sub	sp, #80	; 0x50
 8003430:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <SystemClock_Config+0xbc>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a2b      	ldr	r2, [pc, #172]	; (80034e8 <SystemClock_Config+0xbc>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <SystemClock_Config+0xbc>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <SystemClock_Config+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a25      	ldr	r2, [pc, #148]	; (80034ec <SystemClock_Config+0xc0>)
 8003458:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <SystemClock_Config+0xc0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800346a:	2301      	movs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800346e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003472:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003474:	2302      	movs	r3, #2
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003478:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800347e:	2308      	movs	r3, #8
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003482:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003488:	2302      	movs	r3, #2
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800348c:	2307      	movs	r3, #7
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe fab7 	bl	8001a08 <HAL_RCC_OscConfig>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 80034a0:	f000 f826 	bl	80034f0 <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80034a4:	f7fe fa60 	bl	8001968 <HAL_PWREx_EnableOverDrive>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80034ae:	f000 f81f 	bl	80034f0 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80034b2:	230f      	movs	r3, #15
 80034b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b6:	2302      	movs	r3, #2
 80034b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 80034be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80034c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034ce:	2105      	movs	r1, #5
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fd11 	bl	8001ef8 <HAL_RCC_ClockConfig>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 80034dc:	f000 f808 	bl	80034f0 <Error_Handler>
  }
}
 80034e0:	bf00      	nop
 80034e2:	3750      	adds	r7, #80	; 0x50
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40007000 	.word	0x40007000

080034f0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80034f4:	2001      	movs	r0, #1
 80034f6:	f7fd f971 	bl	80007dc <BSP_LED_On>
  while (1)
 80034fa:	e7fe      	b.n	80034fa <Error_Handler+0xa>

080034fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80034fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003534 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003500:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003502:	e003      	b.n	800350c <LoopCopyDataInit>

08003504 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003504:	4b0c      	ldr	r3, [pc, #48]	; (8003538 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003506:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003508:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800350a:	3104      	adds	r1, #4

0800350c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800350c:	480b      	ldr	r0, [pc, #44]	; (800353c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800350e:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003510:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003512:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003514:	d3f6      	bcc.n	8003504 <CopyDataInit>
  ldr  r2, =_sbss
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003518:	e002      	b.n	8003520 <LoopFillZerobss>

0800351a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800351a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800351c:	f842 3b04 	str.w	r3, [r2], #4

08003520 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003522:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003524:	d3f9      	bcc.n	800351a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003526:	f7fd f973 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352a:	f000 f811 	bl	8003550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352e:	f7ff ff51 	bl	80033d4 <main>
  bx  lr    
 8003532:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003534:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003538:	08003764 	.word	0x08003764
  ldr  r0, =_sdata
 800353c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003540:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8003544:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8003548:	20000110 	.word	0x20000110

0800354c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC_IRQHandler>
	...

08003550 <__libc_init_array>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	4d0d      	ldr	r5, [pc, #52]	; (8003588 <__libc_init_array+0x38>)
 8003554:	4c0d      	ldr	r4, [pc, #52]	; (800358c <__libc_init_array+0x3c>)
 8003556:	1b64      	subs	r4, r4, r5
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	2600      	movs	r6, #0
 800355c:	42a6      	cmp	r6, r4
 800355e:	d109      	bne.n	8003574 <__libc_init_array+0x24>
 8003560:	4d0b      	ldr	r5, [pc, #44]	; (8003590 <__libc_init_array+0x40>)
 8003562:	4c0c      	ldr	r4, [pc, #48]	; (8003594 <__libc_init_array+0x44>)
 8003564:	f000 f818 	bl	8003598 <_init>
 8003568:	1b64      	subs	r4, r4, r5
 800356a:	10a4      	asrs	r4, r4, #2
 800356c:	2600      	movs	r6, #0
 800356e:	42a6      	cmp	r6, r4
 8003570:	d105      	bne.n	800357e <__libc_init_array+0x2e>
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	f855 3b04 	ldr.w	r3, [r5], #4
 8003578:	4798      	blx	r3
 800357a:	3601      	adds	r6, #1
 800357c:	e7ee      	b.n	800355c <__libc_init_array+0xc>
 800357e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003582:	4798      	blx	r3
 8003584:	3601      	adds	r6, #1
 8003586:	e7f2      	b.n	800356e <__libc_init_array+0x1e>
 8003588:	0800375c 	.word	0x0800375c
 800358c:	0800375c 	.word	0x0800375c
 8003590:	0800375c 	.word	0x0800375c
 8003594:	08003760 	.word	0x08003760

08003598 <_init>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr

080035a4 <_fini>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	bf00      	nop
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr
